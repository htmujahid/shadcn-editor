{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "link-plugin",
  "type": "registry:ui",
  "registryDependencies": [
    "https://shadcn-editor.vercel.app/r/link-toolbar-plugin.json"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/editor/plugins/link-plugin.tsx",
      "content": "\"use client\"\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport * as React from \"react\"\nimport { JSX } from \"react\"\nimport { LinkPlugin as LexicalLinkPlugin } from \"@lexical/react/LexicalLinkPlugin\"\n\nimport { validateUrl } from \"@/registry/new-york-v4/editor/utils/url\"\n\nexport function LinkPlugin(): JSX.Element {\n  return <LexicalLinkPlugin validateUrl={validateUrl} />\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/link-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/utils/url.ts",
      "content": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst SUPPORTED_URL_PROTOCOLS = new Set([\n  \"http:\",\n  \"https:\",\n  \"mailto:\",\n  \"sms:\",\n  \"tel:\",\n])\n\nexport function sanitizeUrl(url: string): string {\n  try {\n    const parsedUrl = new URL(url)\n    // eslint-disable-next-line no-script-url\n    if (!SUPPORTED_URL_PROTOCOLS.has(parsedUrl.protocol)) {\n      return \"about:blank\"\n    }\n  } catch {\n    return url\n  }\n  return url\n}\n\n// Source: https://stackoverflow.com/a/8234912/2013580\nconst urlRegExp = new RegExp(\n  /((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[\\w]*))?)/\n)\nexport function validateUrl(url: string): boolean {\n  // TODO Fix UI for link insertion; it should never default to an invalid URL such as https://.\n  // Maybe show a dialog where they user can type the URL before inserting it.\n  return url === \"https://\" || urlRegExp.test(url)\n}\n",
      "type": "registry:component",
      "target": "components/editor/utils/url.ts"
    }
  ]
}