{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-plugin",
  "type": "registry:ui",
  "dependencies": [
    "lodash",
    "@lexical/utils",
    "@lexical/code",
    "@lexical/selection"
  ],
  "devDependencies": [
    "@types/lodash"
  ],
  "registryDependencies": [
    "select",
    "@shadcn-editor/toolbar-plugin"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/editor/plugins/code-action-menu-plugin.tsx",
      "content": "\"use client\"\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { JSX, useEffect, useRef, useState } from \"react\"\nimport {\n  $isCodeNode,\n  CodeNode,\n  getLanguageFriendlyName,\n  normalizeCodeLang,\n} from \"@lexical/code\"\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\"\nimport { $getNearestNodeFromDOMNode, isHTMLElement } from \"lexical\"\nimport { createPortal } from \"react-dom\"\n\nimport { useDebounce } from \"@/registry/new-york-v4/editor/editor-hooks/use-debounce\"\nimport { CopyButton } from \"@/registry/new-york-v4/editor/editor-ui/code-button\"\n\nconst CODE_PADDING = 8\n\ninterface Position {\n  top: string\n  right: string\n}\n\nfunction CodeActionMenuContainer({\n  anchorElem,\n}: {\n  anchorElem: HTMLElement\n}): JSX.Element {\n  const [editor] = useLexicalComposerContext()\n\n  const [lang, setLang] = useState(\"\")\n  const [isShown, setShown] = useState<boolean>(false)\n  const [shouldListenMouseMove, setShouldListenMouseMove] =\n    useState<boolean>(false)\n  const [position, setPosition] = useState<Position>({\n    right: \"0\",\n    top: \"0\",\n  })\n  const codeSetRef = useRef<Set<string>>(new Set())\n  const codeDOMNodeRef = useRef<HTMLElement | null>(null)\n\n  function getCodeDOMNode(): HTMLElement | null {\n    return codeDOMNodeRef.current\n  }\n\n  const debouncedOnMouseMove = useDebounce(\n    (event: MouseEvent) => {\n      const { codeDOMNode, isOutside } = getMouseInfo(event)\n      if (isOutside) {\n        setShown(false)\n        return\n      }\n\n      if (!codeDOMNode) {\n        return\n      }\n\n      codeDOMNodeRef.current = codeDOMNode\n\n      let codeNode: CodeNode | null = null\n      let _lang = \"\"\n\n      editor.update(() => {\n        const maybeCodeNode = $getNearestNodeFromDOMNode(codeDOMNode)\n\n        if ($isCodeNode(maybeCodeNode)) {\n          codeNode = maybeCodeNode\n          _lang = codeNode.getLanguage() || \"\"\n        }\n      })\n\n      if (codeNode) {\n        const { y: editorElemY, right: editorElemRight } =\n          anchorElem.getBoundingClientRect()\n        const { y, right } = codeDOMNode.getBoundingClientRect()\n        setLang(_lang)\n        setShown(true)\n        setPosition({\n          right: `${editorElemRight - right + CODE_PADDING}px`,\n          top: `${y - editorElemY}px`,\n        })\n      }\n    },\n    50,\n    1000\n  )\n\n  useEffect(() => {\n    if (!shouldListenMouseMove) {\n      return\n    }\n\n    document.addEventListener(\"mousemove\", debouncedOnMouseMove)\n\n    return () => {\n      setShown(false)\n      debouncedOnMouseMove.cancel()\n      document.removeEventListener(\"mousemove\", debouncedOnMouseMove)\n    }\n  }, [shouldListenMouseMove, debouncedOnMouseMove])\n\n  useEffect(() => {\n    return editor.registerMutationListener(\n      CodeNode,\n      (mutations) => {\n        editor.getEditorState().read(() => {\n          for (const [key, type] of mutations) {\n            switch (type) {\n              case \"created\":\n                codeSetRef.current.add(key)\n                break\n\n              case \"destroyed\":\n                codeSetRef.current.delete(key)\n                break\n\n              default:\n                break\n            }\n          }\n        })\n        setShouldListenMouseMove(codeSetRef.current.size > 0)\n      },\n      { skipInitialization: false }\n    )\n  }, [editor])\n\n  const normalizedLang = normalizeCodeLang(lang)\n  const codeFriendlyName = getLanguageFriendlyName(lang)\n\n  return (\n    <>\n      {isShown ? (\n        <div className=\"code-action-menu-container\" style={{ ...position }}>\n          <div className=\"code-highlight-language\">{codeFriendlyName}</div>\n          <CopyButton editor={editor} getCodeDOMNode={getCodeDOMNode} />\n        </div>\n      ) : null}\n    </>\n  )\n}\n\nfunction getMouseInfo(event: MouseEvent): {\n  codeDOMNode: HTMLElement | null\n  isOutside: boolean\n} {\n  const target = event.target\n\n  if (isHTMLElement(target)) {\n    const codeDOMNode = target.closest<HTMLElement>(\n      \"code.PlaygroundEditorTheme__code\"\n    )\n    const isOutside = !(\n      codeDOMNode ||\n      target.closest<HTMLElement>(\"div.code-action-menu-container\")\n    )\n\n    return { codeDOMNode, isOutside }\n  } else {\n    return { codeDOMNode: null, isOutside: true }\n  }\n}\n\nexport function CodeActionMenuPlugin({\n  anchorElem = document.body,\n}: {\n  anchorElem: HTMLElement | null\n}): React.ReactPortal | null {\n  if (!anchorElem) {\n    return null\n  }\n\n  return createPortal(\n    <CodeActionMenuContainer anchorElem={anchorElem} />,\n    anchorElem\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/code-action-menu-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/code-highlight-plugin.tsx",
      "content": "\"use client\"\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { JSX, useEffect } from \"react\"\nimport { registerCodeHighlighting } from \"@lexical/code\"\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\"\n\nexport function CodeHighlightPlugin(): JSX.Element | null {\n  const [editor] = useLexicalComposerContext()\n\n  useEffect(() => {\n    return registerCodeHighlighting(editor)\n  }, [editor])\n\n  return null\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/code-highlight-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/editor-hooks/use-debounce.ts",
      "content": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { useMemo, useRef } from \"react\"\nimport { debounce } from \"lodash\"\n\nexport function useDebounce<T extends (...args: never[]) => void>(\n  fn: T,\n  ms: number,\n  maxWait?: number\n) {\n  const funcRef = useRef<T | null>(null)\n  funcRef.current = fn\n\n  return useMemo(\n    () =>\n      debounce(\n        (...args: Parameters<T>) => {\n          if (funcRef.current) {\n            funcRef.current(...args)\n          }\n        },\n        ms,\n        { maxWait }\n      ),\n    [ms, maxWait]\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/editor-hooks/use-debounce.ts"
    },
    {
      "path": "registry/new-york-v4/editor/editor-ui/code-button.tsx",
      "content": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport * as React from \"react\"\nimport { useState } from \"react\"\nimport { $isCodeNode } from \"@lexical/code\"\nimport {\n  $getNearestNodeFromDOMNode,\n  $getSelection,\n  $setSelection,\n  LexicalEditor,\n} from \"lexical\"\nimport { CircleCheckIcon, CopyIcon } from \"lucide-react\"\n\nimport { useDebounce } from \"@/registry/new-york-v4/editor/editor-hooks/use-debounce\"\n\ninterface Props {\n  editor: LexicalEditor\n  getCodeDOMNode: () => HTMLElement | null\n}\n\nexport function CopyButton({ editor, getCodeDOMNode }: Props) {\n  const [isCopyCompleted, setCopyCompleted] = useState<boolean>(false)\n\n  const removeSuccessIcon = useDebounce(() => {\n    setCopyCompleted(false)\n  }, 1000)\n\n  async function handleClick(): Promise<void> {\n    const codeDOMNode = getCodeDOMNode()\n\n    if (!codeDOMNode) {\n      return\n    }\n\n    let content = \"\"\n\n    editor.update(() => {\n      const codeNode = $getNearestNodeFromDOMNode(codeDOMNode)\n\n      if ($isCodeNode(codeNode)) {\n        content = codeNode.getTextContent()\n      }\n\n      const selection = $getSelection()\n      $setSelection(selection)\n    })\n\n    try {\n      await navigator.clipboard.writeText(content)\n      setCopyCompleted(true)\n      removeSuccessIcon()\n    } catch (err) {\n      console.error(\"Failed to copy: \", err)\n    }\n  }\n\n  return (\n    <button\n      className=\"text-foreground/50 flex shrink-0 cursor-pointer items-center rounded border border-transparent bg-none p-1 uppercase\"\n      onClick={handleClick}\n      aria-label=\"copy\"\n    >\n      {isCopyCompleted ? (\n        <CircleCheckIcon className=\"size-4\" />\n      ) : (\n        <CopyIcon className=\"size-4\" />\n      )}\n    </button>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/editor-ui/code-button.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/toolbar/block-format/format-code-block.tsx",
      "content": "import { $createCodeNode } from \"@lexical/code\"\nimport { $setBlocksType } from \"@lexical/selection\"\nimport { $getSelection, $isRangeSelection } from \"lexical\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\nimport { blockTypeToBlockName } from \"@/registry/new-york-v4/editor/plugins/toolbar/block-format/block-format-data\"\nimport { SelectItem } from \"@/registry/new-york-v4/ui/select\"\n\nconst BLOCK_FORMAT_VALUE = \"code\"\n\nexport function FormatCodeBlock() {\n  const { activeEditor, blockType } = useToolbarContext()\n\n  const formatCode = () => {\n    if (blockType !== \"code\") {\n      activeEditor.update(() => {\n        let selection = $getSelection()\n\n        if (selection !== null) {\n          if (selection.isCollapsed()) {\n            $setBlocksType(selection, () => $createCodeNode())\n          } else {\n            const textContent = selection.getTextContent()\n            const codeNode = $createCodeNode()\n            selection.insertNodes([codeNode])\n            selection = $getSelection()\n            if ($isRangeSelection(selection)) {\n              selection.insertRawText(textContent)\n            }\n          }\n        }\n      })\n    }\n  }\n\n  return (\n    <SelectItem value=\"code\" onPointerDown={formatCode}>\n      <div className=\"flex items-center gap-1 font-normal\">\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].icon}\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].label}\n      </div>\n    </SelectItem>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/block-format/format-code-block.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/toolbar/block-format/block-format-data.tsx",
      "content": "import {\n  CodeIcon,\n  Heading1Icon,\n  Heading2Icon,\n  Heading3Icon,\n  ListIcon,\n  ListOrderedIcon,\n  ListTodoIcon,\n  QuoteIcon,\n  TextIcon,\n} from \"lucide-react\"\n\nexport const blockTypeToBlockName: Record<\n  string,\n  { label: string; icon: React.ReactNode }\n> = {\n  paragraph: {\n    label: \"Paragraph\",\n    icon: <TextIcon className=\"size-4\" />,\n  },\n  h1: {\n    label: \"Heading 1\",\n    icon: <Heading1Icon className=\"size-4\" />,\n  },\n  h2: {\n    label: \"Heading 2\",\n    icon: <Heading2Icon className=\"size-4\" />,\n  },\n  h3: {\n    label: \"Heading 3\",\n    icon: <Heading3Icon className=\"size-4\" />,\n  },\n  number: {\n    label: \"Numbered List\",\n    icon: <ListOrderedIcon className=\"size-4\" />,\n  },\n  bullet: {\n    label: \"Bulleted List\",\n    icon: <ListIcon className=\"size-4\" />,\n  },\n  check: {\n    label: \"Check List\",\n    icon: <ListTodoIcon className=\"size-4\" />,\n  },\n  code: {\n    label: \"Code Block\",\n    icon: <CodeIcon className=\"size-4\" />,\n  },\n  quote: {\n    label: \"Quote\",\n    icon: <QuoteIcon className=\"size-4\" />,\n  },\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/block-format/block-format-data.tsx"
    }
  ]
}