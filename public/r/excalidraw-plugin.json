{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "excalidraw-plugin",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "files": [
    {
      "path": "editor/plugins/excalidraw-plugin.tsx",
      "content": "'use client'\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nimport { useEffect, useState, JSX } from 'react'\r\n\r\nimport type { AppState, BinaryFiles } from '@excalidraw/excalidraw/types/types'\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport { $wrapNodeInElement } from '@lexical/utils'\r\nimport {\r\n  $createParagraphNode,\r\n  $insertNodes,\r\n  $isRootOrShadowRoot,\r\n  COMMAND_PRIORITY_EDITOR,\r\n  LexicalCommand,\r\n  createCommand,\r\n} from 'lexical'\r\n\r\nimport { $createExcalidrawNode, ExcalidrawNode } from '@/registry/default/editor/nodes/excalidraw-node'\r\nimport type { ExcalidrawInitialElements } from '@/registry/default/editor/editor-ui/excalidraw-modal'\r\nimport { ExcalidrawModal } from '@/registry/default/editor/editor-ui/excalidraw-modal'\r\n\r\nexport const INSERT_EXCALIDRAW_COMMAND: LexicalCommand<void> = createCommand(\r\n  'INSERT_EXCALIDRAW_COMMAND'\r\n)\r\n\r\nexport function ExcalidrawPlugin(): JSX.Element | null {\r\n  const [editor] = useLexicalComposerContext()\r\n  const [isModalOpen, setModalOpen] = useState<boolean>(false)\r\n\r\n  useEffect(() => {\r\n    if (!editor.hasNodes([ExcalidrawNode])) {\r\n      throw new Error(\r\n        'ExcalidrawPlugin: ExcalidrawNode not registered on editor'\r\n      )\r\n    }\r\n\r\n    return editor.registerCommand(\r\n      INSERT_EXCALIDRAW_COMMAND,\r\n      () => {\r\n        setModalOpen(true)\r\n        return true\r\n      },\r\n      COMMAND_PRIORITY_EDITOR\r\n    )\r\n  }, [editor])\r\n\r\n  const onClose = () => {\r\n    setModalOpen(false)\r\n  }\r\n\r\n  const onDelete = () => {\r\n    setModalOpen(false)\r\n  }\r\n\r\n  const onSave = (\r\n    elements: ExcalidrawInitialElements,\r\n    appState: Partial<AppState>,\r\n    files: BinaryFiles\r\n  ) => {\r\n    editor.update(() => {\r\n      const excalidrawNode = $createExcalidrawNode()\r\n      excalidrawNode.setData(\r\n        JSON.stringify({\r\n          appState,\r\n          elements,\r\n          files,\r\n        })\r\n      )\r\n      $insertNodes([excalidrawNode])\r\n      if ($isRootOrShadowRoot(excalidrawNode.getParentOrThrow())) {\r\n        $wrapNodeInElement(excalidrawNode, $createParagraphNode).selectEnd()\r\n      }\r\n    })\r\n    setModalOpen(false)\r\n  }\r\n  return (\r\n    <ExcalidrawModal\r\n      initialElements={[]}\r\n      initialAppState={{} as AppState}\r\n      initialFiles={{}}\r\n      isShown={isModalOpen}\r\n      onDelete={onDelete}\r\n      onClose={onClose}\r\n      onSave={onSave}\r\n      closeOnClickOutside={false}\r\n    />\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/excalidraw-plugin.tsx"
    }
  ]
}