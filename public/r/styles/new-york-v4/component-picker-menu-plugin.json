{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "component-picker-menu-plugin",
  "type": "registry:ui",
  "registryDependencies": [
    "command",
    "dialog",
    "https://shadcn-editor.vercel.app/r/rich-text-editor-plugin.json"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/editor/plugins/component-picker-menu-plugin.tsx",
      "content": "\"use client\"\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { JSX, useCallback, useMemo, useState } from \"react\"\nimport dynamic from \"next/dynamic\"\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\"\nimport { useBasicTypeaheadTriggerMatch } from \"@lexical/react/LexicalTypeaheadMenuPlugin\"\nimport { TextNode } from \"lexical\"\nimport { createPortal } from \"react-dom\"\n\nimport { useEditorModal } from \"@/registry/new-york-v4/editor/editor-hooks/use-modal\"\nimport {\n  Command,\n  CommandGroup,\n  CommandItem,\n  CommandList,\n} from \"@/registry/new-york-v4/ui/command\"\n\nimport { ComponentPickerOption } from \"./picker/component-picker-option\"\n\nconst LexicalTypeaheadMenuPlugin = dynamic(\n  () => import(\"./default/lexical-typeahead-menu-plugin\"),\n  { ssr: false }\n)\n\nexport function ComponentPickerMenuPlugin({\n  baseOptions = [],\n  dynamicOptionsFn,\n}: {\n  baseOptions?: Array<ComponentPickerOption>\n  dynamicOptionsFn?: ({\n    queryString,\n  }: {\n    queryString: string\n  }) => Array<ComponentPickerOption>\n}): JSX.Element {\n  const [editor] = useLexicalComposerContext()\n  const [modal, showModal] = useEditorModal()\n  const [queryString, setQueryString] = useState<string | null>(null)\n\n  const checkForTriggerMatch = useBasicTypeaheadTriggerMatch(\"/\", {\n    minLength: 0,\n  })\n\n  const options = useMemo(() => {\n    if (!queryString) {\n      return baseOptions\n    }\n\n    const regex = new RegExp(queryString, \"i\")\n\n    return [\n      ...(dynamicOptionsFn?.({ queryString }) || []),\n      ...baseOptions.filter(\n        (option) =>\n          regex.test(option.title) ||\n          option.keywords.some((keyword) => regex.test(keyword))\n      ),\n    ]\n  }, [editor, queryString, showModal])\n\n  const onSelectOption = useCallback(\n    (\n      selectedOption: ComponentPickerOption,\n      nodeToRemove: TextNode | null,\n      closeMenu: () => void,\n      matchingString: string\n    ) => {\n      editor.update(() => {\n        nodeToRemove?.remove()\n        selectedOption.onSelect(matchingString, editor, showModal)\n        closeMenu()\n      })\n    },\n    [editor]\n  )\n\n  return (\n    <>\n      {modal}\n      {/* @ts-ignore */}\n      <LexicalTypeaheadMenuPlugin<ComponentPickerOption>\n        onQueryChange={setQueryString}\n        onSelectOption={onSelectOption}\n        triggerFn={checkForTriggerMatch}\n        options={options}\n        menuRenderFn={(\n          anchorElementRef,\n          { selectedIndex, selectOptionAndCleanUp, setHighlightedIndex }\n        ) => {\n          return anchorElementRef.current && options.length\n            ? createPortal(\n                <div className=\"fixed w-[250px] rounded-md shadow-md\">\n                  <Command\n                    onKeyDown={(e) => {\n                      if (e.key === \"ArrowUp\") {\n                        e.preventDefault()\n                        setHighlightedIndex(\n                          selectedIndex !== null\n                            ? (selectedIndex - 1 + options.length) %\n                                options.length\n                            : options.length - 1\n                        )\n                      } else if (e.key === \"ArrowDown\") {\n                        e.preventDefault()\n                        setHighlightedIndex(\n                          selectedIndex !== null\n                            ? (selectedIndex + 1) % options.length\n                            : 0\n                        )\n                      }\n                    }}\n                  >\n                    <CommandList>\n                      <CommandGroup>\n                        {options.map((option, index) => (\n                          <CommandItem\n                            key={option.key}\n                            value={option.title}\n                            onSelect={() => {\n                              selectOptionAndCleanUp(option)\n                            }}\n                            className={`flex items-center gap-2 ${\n                              selectedIndex === index\n                                ? \"bg-accent\"\n                                : \"!bg-transparent\"\n                            }`}\n                          >\n                            {option.icon}\n                            {option.title}\n                          </CommandItem>\n                        ))}\n                      </CommandGroup>\n                    </CommandList>\n                  </Command>\n                </div>,\n                anchorElementRef.current\n              )\n            : null\n        }}\n      />\n    </>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/component-picker-menu-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/editor-hooks/use-modal.tsx",
      "content": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { JSX, useCallback, useMemo, useState } from \"react\"\nimport * as React from \"react\"\n\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/registry/new-york-v4/ui/dialog\"\n\nexport function useEditorModal(): [\n  JSX.Element | null,\n  (title: string, showModal: (onClose: () => void) => JSX.Element) => void,\n] {\n  const [modalContent, setModalContent] = useState<null | {\n    closeOnClickOutside: boolean\n    content: JSX.Element\n    title: string\n  }>(null)\n\n  const onClose = useCallback(() => {\n    setModalContent(null)\n  }, [])\n\n  const modal = useMemo(() => {\n    if (modalContent === null) {\n      return null\n    }\n    const { title, content } = modalContent\n    return (\n      <Dialog open={true} onOpenChange={onClose}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>{title}</DialogTitle>\n          </DialogHeader>\n          {content}\n        </DialogContent>\n      </Dialog>\n    )\n  }, [modalContent, onClose])\n\n  const showModal = useCallback(\n    (\n      title: string,\n      getContent: (onClose: () => void) => JSX.Element,\n      closeOnClickOutside = false\n    ) => {\n      setModalContent({\n        closeOnClickOutside,\n        content: getContent(onClose),\n        title,\n      })\n    },\n    [onClose]\n  )\n\n  return [modal, showModal]\n}\n",
      "type": "registry:component",
      "target": "components/editor/editor-hooks/use-modal.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/picker/component-picker-option.tsx",
      "content": "import { JSX } from \"react\"\nimport { MenuOption } from \"@lexical/react/LexicalTypeaheadMenuPlugin\"\nimport { LexicalEditor } from \"lexical\"\n\nexport class ComponentPickerOption extends MenuOption {\n  // What shows up in the editor\n  title: string\n  // Icon for display\n  icon?: JSX.Element\n  // For extra searching.\n  keywords: Array<string>\n  // TBD\n  keyboardShortcut?: string\n  // What happens when you select this option?\n  onSelect: (\n    queryString: string,\n    editor: LexicalEditor,\n    showModal: (\n      title: string,\n      showModal: (onClose: () => void) => JSX.Element\n    ) => void\n  ) => void\n\n  constructor(\n    title: string,\n    options: {\n      icon?: JSX.Element\n      keywords?: Array<string>\n      keyboardShortcut?: string\n      onSelect: (\n        queryString: string,\n        editor: LexicalEditor,\n        showModal: (\n          title: string,\n          showModal: (onClose: () => void) => JSX.Element\n        ) => void\n      ) => void\n    }\n  ) {\n    super(title)\n    this.title = title\n    this.keywords = options.keywords || []\n    this.icon = options.icon\n    this.keyboardShortcut = options.keyboardShortcut\n    this.onSelect = options.onSelect.bind(this)\n  }\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/picker/component-picker-option.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/default/lexical-typeahead-menu-plugin.ts",
      "content": "import { LexicalTypeaheadMenuPlugin } from \"@lexical/react/LexicalTypeaheadMenuPlugin\"\n\nexport default LexicalTypeaheadMenuPlugin\n",
      "type": "registry:component",
      "target": "components/editor/plugins/default/lexical-typeahead-menu-plugin.ts"
    }
  ]
}