{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "excalidraw-plugin",
  "type": "registry:ui",
  "dependencies": [
    "@excalidraw/excalidraw",
    "@lexical/utils"
  ],
  "registryDependencies": [
    "button",
    "dialog",
    "select",
    "https://shadcn-editor.vercel.app/r/toolbar-plugin.json"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/editor/plugins/excalidraw-plugin.tsx",
      "content": "\"use client\"\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { JSX, useEffect, useState } from \"react\"\nimport type { AppState, BinaryFiles } from \"@excalidraw/excalidraw/types\"\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\"\nimport { $wrapNodeInElement } from \"@lexical/utils\"\nimport {\n  $createParagraphNode,\n  $insertNodes,\n  $isRootOrShadowRoot,\n  COMMAND_PRIORITY_EDITOR,\n  createCommand,\n  LexicalCommand,\n} from \"lexical\"\n\nimport type { ExcalidrawInitialElements } from \"@/registry/new-york-v4/editor/editor-ui/excalidraw-modal\"\nimport { ExcalidrawModal } from \"@/registry/new-york-v4/editor/editor-ui/excalidraw-modal\"\nimport {\n  $createExcalidrawNode,\n  ExcalidrawNode,\n} from \"@/registry/new-york-v4/editor/nodes/excalidraw-node\"\n\nexport const INSERT_EXCALIDRAW_COMMAND: LexicalCommand<void> = createCommand(\n  \"INSERT_EXCALIDRAW_COMMAND\"\n)\n\nexport function ExcalidrawPlugin(): JSX.Element | null {\n  const [editor] = useLexicalComposerContext()\n  const [isModalOpen, setModalOpen] = useState<boolean>(false)\n\n  useEffect(() => {\n    if (!editor.hasNodes([ExcalidrawNode])) {\n      throw new Error(\n        \"ExcalidrawPlugin: ExcalidrawNode not registered on editor\"\n      )\n    }\n\n    return editor.registerCommand(\n      INSERT_EXCALIDRAW_COMMAND,\n      () => {\n        setModalOpen(true)\n        return true\n      },\n      COMMAND_PRIORITY_EDITOR\n    )\n  }, [editor])\n\n  const onClose = () => {\n    setModalOpen(false)\n  }\n\n  const onDelete = () => {\n    setModalOpen(false)\n  }\n\n  const onSave = (\n    elements: ExcalidrawInitialElements,\n    appState: Partial<AppState>,\n    files: BinaryFiles\n  ) => {\n    editor.update(() => {\n      const excalidrawNode = $createExcalidrawNode()\n      excalidrawNode.setData(\n        JSON.stringify({\n          appState,\n          elements,\n          files,\n        })\n      )\n      $insertNodes([excalidrawNode])\n      if ($isRootOrShadowRoot(excalidrawNode.getParentOrThrow())) {\n        $wrapNodeInElement(excalidrawNode, $createParagraphNode).selectEnd()\n      }\n    })\n    setModalOpen(false)\n  }\n  return (\n    <>\n      {isModalOpen && <ExcalidrawModal\n        initialElements={[]}\n        initialAppState={{} as AppState}\n        initialFiles={{}}\n        isShown={isModalOpen}\n        onDelete={onDelete}\n        onClose={onClose}\n        onSave={onSave}\n        closeOnClickOutside={false}\n      />}\n    </>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/excalidraw-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/nodes/excalidraw-node.tsx",
      "content": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport * as React from \"react\"\nimport { JSX, Suspense } from \"react\"\nimport type {\n  DOMConversionMap,\n  DOMConversionOutput,\n  DOMExportOutput,\n  EditorConfig,\n  LexicalEditor,\n  LexicalNode,\n  NodeKey,\n  SerializedLexicalNode,\n  Spread,\n} from \"lexical\"\nimport { DecoratorNode } from \"lexical\"\n\ntype Dimension = number | \"inherit\"\n\nconst ExcalidrawComponent = React.lazy(\n  () => import(\"../editor-ui/excalidraw-component\")\n)\n\nexport type SerializedExcalidrawNode = Spread<\n  {\n    data: string\n    width?: Dimension\n    height?: Dimension\n  },\n  SerializedLexicalNode\n>\n\nfunction $convertExcalidrawElement(\n  domNode: HTMLElement\n): DOMConversionOutput | null {\n  const excalidrawData = domNode.getAttribute(\"data-lexical-excalidraw-json\")\n  const styleAttributes = window.getComputedStyle(domNode)\n  const heightStr = styleAttributes.getPropertyValue(\"height\")\n  const widthStr = styleAttributes.getPropertyValue(\"width\")\n  const height =\n    !heightStr || heightStr === \"inherit\" ? \"inherit\" : parseInt(heightStr, 10)\n  const width =\n    !widthStr || widthStr === \"inherit\" ? \"inherit\" : parseInt(widthStr, 10)\n\n  if (excalidrawData) {\n    const node = $createExcalidrawNode(excalidrawData, width, height)\n    return {\n      node,\n    }\n  }\n  return null\n}\n\nexport class ExcalidrawNode extends DecoratorNode<JSX.Element> {\n  __data: string\n  __width: Dimension\n  __height: Dimension\n\n  static getType(): string {\n    return \"excalidraw\"\n  }\n\n  static clone(node: ExcalidrawNode): ExcalidrawNode {\n    return new ExcalidrawNode(\n      node.__data,\n      node.__width,\n      node.__height,\n      node.__key\n    )\n  }\n\n  static importJSON(serializedNode: SerializedExcalidrawNode): ExcalidrawNode {\n    return new ExcalidrawNode(\n      serializedNode.data,\n      serializedNode.width ?? \"inherit\",\n      serializedNode.height ?? \"inherit\"\n    )\n  }\n\n  exportJSON(): SerializedExcalidrawNode {\n    return {\n      data: this.__data,\n      height: this.__height === \"inherit\" ? undefined : this.__height,\n      type: \"excalidraw\",\n      version: 1,\n      width: this.__width === \"inherit\" ? undefined : this.__width,\n    }\n  }\n\n  constructor(\n    data = \"[]\",\n    width: Dimension = \"inherit\",\n    height: Dimension = \"inherit\",\n    key?: NodeKey\n  ) {\n    super(key)\n    this.__data = data\n    this.__width = width\n    this.__height = height\n  }\n\n  // View\n  createDOM(config: EditorConfig): HTMLElement {\n    const span = document.createElement(\"span\")\n    const theme = config.theme\n    const className = theme.image\n    if (className !== undefined) {\n      span.className = className\n    }\n    return span\n  }\n\n  updateDOM(): false {\n    return false\n  }\n\n  static importDOM(): DOMConversionMap<HTMLSpanElement> | null {\n    return {\n      span: (domNode: HTMLSpanElement) => {\n        if (!domNode.hasAttribute(\"data-lexical-excalidraw-json\")) {\n          return null\n        }\n        return {\n          conversion: $convertExcalidrawElement,\n          priority: 1,\n        }\n      },\n    }\n  }\n\n  exportDOM(editor: LexicalEditor): DOMExportOutput {\n    const element = document.createElement(\"span\")\n\n    element.style.display = \"inline-block\"\n\n    const content = editor.getElementByKey(this.getKey())\n    if (content !== null) {\n      const svg = content.querySelector(\"svg\")\n      if (svg !== null) {\n        element.innerHTML = svg.outerHTML\n      }\n    }\n\n    element.style.width =\n      this.__width === \"inherit\" ? \"inherit\" : `${this.__width}px`\n    element.style.height =\n      this.__height === \"inherit\" ? \"inherit\" : `${this.__height}px`\n\n    element.setAttribute(\"data-lexical-excalidraw-json\", this.__data)\n    return { element }\n  }\n\n  setData(data: string): void {\n    const self = this.getWritable()\n    self.__data = data\n  }\n\n  getWidth(): Dimension {\n    return this.getLatest().__width\n  }\n\n  setWidth(width: Dimension): void {\n    const self = this.getWritable()\n    self.__width = width\n  }\n\n  getHeight(): Dimension {\n    return this.getLatest().__height\n  }\n\n  setHeight(height: Dimension): void {\n    const self = this.getWritable()\n    self.__height = height\n  }\n\n  decorate(editor: LexicalEditor, config: EditorConfig): JSX.Element {\n    return (\n      <Suspense fallback={null}>\n        <ExcalidrawComponent\n          nodeKey={this.getKey()}\n          data={this.__data}\n          width={this.__width}\n          height={this.__height}\n        />\n      </Suspense>\n    )\n  }\n}\n\nexport function $createExcalidrawNode(\n  data: string = \"[]\",\n  width: Dimension = \"inherit\",\n  height: Dimension = \"inherit\"\n): ExcalidrawNode {\n  return new ExcalidrawNode(data, width, height)\n}\n\nexport function $isExcalidrawNode(\n  node: LexicalNode | null | undefined\n): node is ExcalidrawNode {\n  return node instanceof ExcalidrawNode\n}\n",
      "type": "registry:component",
      "target": "components/editor/nodes/excalidraw-node.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/editor-ui/excalidraw-modal.tsx",
      "content": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport * as React from \"react\"\nimport {\n  JSX,\n  ReactElement,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\"\nimport dynamic from \"next/dynamic\"\nimport {\n  AppState,\n  BinaryFiles,\n  ExcalidrawImperativeAPI,\n  ExcalidrawInitialDataState,\n} from \"@excalidraw/excalidraw/types\"\nimport { DialogTrigger } from \"@radix-ui/react-dialog\"\n\nimport { Button } from \"@/registry/new-york-v4/ui/button\"\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogFooter,\n} from \"@/registry/new-york-v4/ui/dialog\"\n\nimport \"@excalidraw/excalidraw/index.css\"\n\nconst Excalidraw = dynamic(\n  async () => (await import(\"@excalidraw/excalidraw\")).Excalidraw,\n  {\n    ssr: false,\n  },\n);\n\nexport type ExcalidrawInitialElements = ExcalidrawInitialDataState[\"elements\"]\n\ntype Props = {\n  closeOnClickOutside?: boolean\n  /**\n   * The initial set of elements to draw into the scene\n   */\n  initialElements: ExcalidrawInitialElements\n  /**\n   * The initial set of elements to draw into the scene\n   */\n  initialAppState: AppState\n  /**\n   * The initial set of elements to draw into the scene\n   */\n  initialFiles: BinaryFiles\n  /**\n   * Controls the visibility of the modal\n   */\n  isShown?: boolean\n  /**\n   * Callback when closing and discarding the new changes\n   */\n  onClose: () => void\n  /**\n   * Completely remove Excalidraw component\n   */\n  onDelete: () => void\n  /**\n   * Callback when the save button is clicked\n   */\n  onSave: (\n    elements: ExcalidrawInitialElements,\n    appState: Partial<AppState>,\n    files: BinaryFiles\n  ) => void\n}\n\nexport const useCallbackRefState = () => {\n  const [refValue, setRefValue] =\n    React.useState<ExcalidrawImperativeAPI | null>(null)\n  const refCallback = React.useCallback(\n    (value: ExcalidrawImperativeAPI | null) => setRefValue(value),\n    []\n  )\n  return [refValue, refCallback] as const\n}\n\n/**\n * @explorer-desc\n * A component which renders a modal with Excalidraw (a painting app)\n * which can be used to export an editable image\n */\nexport function ExcalidrawModal({\n  closeOnClickOutside = false,\n  onSave,\n  initialElements,\n  initialAppState,\n  initialFiles,\n  isShown = false,\n  onDelete,\n  onClose,\n}: Props): ReactElement | null {\n  const theme = useThemePrototype();\n  const excaliDrawModelRef = useRef<HTMLDivElement | null>(null)\n  const [excalidrawAPI, excalidrawAPIRefCallback] = useCallbackRefState()\n  const [discardModalOpen, setDiscardModalOpen] = useState(false)\n  const [elements, setElements] =\n    useState<ExcalidrawInitialElements>(initialElements)\n  const [files, setFiles] = useState<BinaryFiles>(initialFiles)\n\n  useEffect(() => {\n    if (excaliDrawModelRef.current !== null) {\n      excaliDrawModelRef.current.focus()\n    }\n  }, [])\n\n  useEffect(() => {\n    let modalOverlayElement: HTMLElement | null = null\n\n    const clickOutsideHandler = (event: MouseEvent) => {\n      const target = event.target\n      if (\n        excaliDrawModelRef.current !== null &&\n        !excaliDrawModelRef.current.contains(target as Node) &&\n        closeOnClickOutside\n      ) {\n        onDelete()\n      }\n    }\n\n    if (excaliDrawModelRef.current !== null) {\n      modalOverlayElement = excaliDrawModelRef.current?.parentElement\n      if (modalOverlayElement !== null) {\n        modalOverlayElement?.addEventListener(\"click\", clickOutsideHandler)\n      }\n    }\n\n    return () => {\n      if (modalOverlayElement !== null) {\n        modalOverlayElement?.removeEventListener(\"click\", clickOutsideHandler)\n      }\n    }\n  }, [closeOnClickOutside, onDelete])\n\n  useLayoutEffect(() => {\n    const currentModalRef = excaliDrawModelRef.current\n\n    const onKeyDown = (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        onDelete()\n      }\n    }\n\n    if (currentModalRef !== null) {\n      currentModalRef.addEventListener(\"keydown\", onKeyDown)\n    }\n\n    return () => {\n      if (currentModalRef !== null) {\n        currentModalRef.removeEventListener(\"keydown\", onKeyDown)\n      }\n    }\n  }, [elements, files, onDelete])\n\n  const save = () => {\n    if (elements && elements.filter((el) => !el.isDeleted).length > 0) {\n      const appState = excalidrawAPI?.getAppState()\n      // We only need a subset of the state\n      const partialState: Partial<AppState> = {\n        exportBackground: appState?.exportBackground,\n        exportScale: appState?.exportScale,\n        exportWithDarkMode: appState?.theme === \"dark\",\n        isBindingEnabled: appState?.isBindingEnabled,\n        isLoading: appState?.isLoading,\n        name: appState?.name,\n        theme: appState?.theme,\n        viewBackgroundColor: appState?.viewBackgroundColor,\n        viewModeEnabled: appState?.viewModeEnabled,\n        zenModeEnabled: appState?.zenModeEnabled,\n        zoom: appState?.zoom,\n      }\n      onSave(elements, partialState, files)\n    } else {\n      // delete node if the scene is clear\n      onDelete()\n    }\n  }\n\n  const discard = () => {\n    setDiscardModalOpen(true)\n  }\n\n  function ShowDiscardDialog(): JSX.Element {\n    return (\n      <Dialog open={discardModalOpen} onOpenChange={setDiscardModalOpen}>\n        <DialogContent>\n          Are you sure you want to discard the changes?\n        </DialogContent>\n        <DialogClose asChild>\n          <Button\n            onClick={() => {\n              setDiscardModalOpen(false)\n              onClose()\n            }}\n          >\n            Discard\n          </Button>\n        </DialogClose>\n        <DialogClose asChild>\n          <Button onClick={() => setDiscardModalOpen(false)}>Cancel</Button>\n        </DialogClose>\n      </Dialog>\n    )\n  }\n\n  if (isShown === false) {\n    return null\n  }\n\n  const onChange = (\n    els: ExcalidrawInitialElements,\n    _: AppState,\n    fls: BinaryFiles\n  ) => {\n    setElements(els)\n    setFiles(fls)\n  }\n\n  return (\n    <Dialog open={isShown} onOpenChange={(open) => !open && onClose()}>\n      <DialogTrigger />\n      <DialogContent \n        showCloseButton={false}\n        className=\"h-4/6 max-w-4xl overflow-hidden p-0 pb-10\" \n      >\n        <div className=\"relative\" role=\"dialog\">\n          <div className=\"h-full w-full\" ref={excaliDrawModelRef} tabIndex={-1}>\n            {discardModalOpen && <ShowDiscardDialog />}\n            <div className=\"h-full w-full\">\n              <Excalidraw\n                theme={theme}\n                onChange={onChange}\n                excalidrawAPI={excalidrawAPIRefCallback}\n                initialData={{\n                  appState: initialAppState || { isLoading: false },\n                  elements: initialElements,\n                  files: initialFiles,\n                }}\n              />\n              <div className=\"flex h-full items-center justify-center\">\n                Loading...\n              </div>\n              <div className=\"absolute right-1/2 -bottom-8 z-10 flex translate-x-1/2 gap-2\">\n                <Button variant=\"outline\" onClick={onClose}>\n                  Discard\n                </Button>\n                <Button onClick={save}>Save</Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nfunction useThemePrototype() {\n  const [theme, setTheme] = useState<'light' | 'dark'>(\"light\")\n\n  useEffect(() => {\n    const root = document.documentElement\n    setTheme(root.classList.contains(\"dark\") ? \"dark\" : \"light\")\n  }, [])\n\n  return theme;\n}",
      "type": "registry:component",
      "target": "components/editor/editor-ui/excalidraw-modal.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/editor-ui/excalidraw-component.tsx",
      "content": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { JSX, useCallback, useEffect, useMemo, useRef, useState } from \"react\"\nimport * as React from \"react\"\nimport { AppState, BinaryFiles } from \"@excalidraw/excalidraw/types\"\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\"\nimport { useLexicalEditable } from \"@lexical/react/useLexicalEditable\"\nimport { useLexicalNodeSelection } from \"@lexical/react/useLexicalNodeSelection\"\nimport { mergeRegister } from \"@lexical/utils\"\nimport type { NodeKey } from \"lexical\"\nimport {\n  $getNodeByKey,\n  CLICK_COMMAND,\n  COMMAND_PRIORITY_LOW,\n  KEY_BACKSPACE_COMMAND,\n  KEY_DELETE_COMMAND,\n} from \"lexical\"\n\nimport ExcalidrawImage from \"@/registry/new-york-v4/editor/editor-ui/excalidraw-image\"\nimport type { ExcalidrawInitialElements } from \"@/registry/new-york-v4/editor/editor-ui/excalidraw-modal\"\nimport { ExcalidrawModal } from \"@/registry/new-york-v4/editor/editor-ui/excalidraw-modal\"\nimport { ImageResizer } from \"@/registry/new-york-v4/editor/editor-ui/image-resizer\"\nimport { $isExcalidrawNode } from \"@/registry/new-york-v4/editor/nodes/excalidraw-node\"\n\nexport default function ExcalidrawComponent({\n  nodeKey,\n  data,\n  width,\n  height,\n}: {\n  data: string\n  nodeKey: NodeKey\n  width: \"inherit\" | number\n  height: \"inherit\" | number\n}): JSX.Element {\n  const [editor] = useLexicalComposerContext()\n  const isEditable = useLexicalEditable()\n  const [isModalOpen, setModalOpen] = useState<boolean>(\n    data === \"[]\" && editor.isEditable()\n  )\n  const imageContainerRef = useRef<HTMLDivElement | null>(null)\n  const buttonRef = useRef<HTMLButtonElement | null>(null)\n  const captionButtonRef = useRef<HTMLButtonElement | null>(null)\n  const [isSelected, setSelected, clearSelection] =\n    useLexicalNodeSelection(nodeKey)\n  const [isResizing, setIsResizing] = useState<boolean>(false)\n\n  const $onDelete = useCallback(\n    (event: KeyboardEvent) => {\n      if (isSelected) {\n        event.preventDefault()\n        editor.update(() => {\n          const node = $getNodeByKey(nodeKey)\n          if (node) {\n            node.remove()\n          }\n        })\n      }\n      return false\n    },\n    [editor, isSelected, nodeKey]\n  )\n\n  useEffect(() => {\n    if (!isEditable) {\n      if (isSelected) {\n        clearSelection()\n      }\n      return\n    }\n    return mergeRegister(\n      editor.registerCommand(\n        CLICK_COMMAND,\n        (event: MouseEvent) => {\n          const buttonElem = buttonRef.current\n          const eventTarget = event.target\n\n          if (isResizing) {\n            return true\n          }\n\n          if (buttonElem !== null && buttonElem.contains(eventTarget as Node)) {\n            if (!event.shiftKey) {\n              clearSelection()\n            }\n            setSelected(!isSelected)\n            if (event.detail > 1) {\n              setModalOpen(true)\n            }\n            return true\n          }\n\n          return false\n        },\n        COMMAND_PRIORITY_LOW\n      ),\n      editor.registerCommand(\n        KEY_DELETE_COMMAND,\n        $onDelete,\n        COMMAND_PRIORITY_LOW\n      ),\n      editor.registerCommand(\n        KEY_BACKSPACE_COMMAND,\n        $onDelete,\n        COMMAND_PRIORITY_LOW\n      )\n    )\n  }, [\n    clearSelection,\n    editor,\n    isSelected,\n    isResizing,\n    $onDelete,\n    setSelected,\n    isEditable,\n  ])\n\n  const deleteNode = useCallback(() => {\n    setModalOpen(false)\n    return editor.update(() => {\n      const node = $getNodeByKey(nodeKey)\n      if (node) {\n        node.remove()\n      }\n    })\n  }, [editor, nodeKey])\n\n  const setData = (\n    els: ExcalidrawInitialElements,\n    aps: Partial<AppState>,\n    fls: BinaryFiles\n  ) => {\n    return editor.update(() => {\n      const node = $getNodeByKey(nodeKey)\n      if ($isExcalidrawNode(node)) {\n        if ((els && els.length > 0) || Object.keys(fls).length > 0) {\n          node.setData(\n            JSON.stringify({\n              appState: aps,\n              elements: els,\n              files: fls,\n            })\n          )\n        } else {\n          node.remove()\n        }\n      }\n    })\n  }\n\n  const onResizeStart = () => {\n    setIsResizing(true)\n  }\n\n  const onResizeEnd = (\n    nextWidth: \"inherit\" | number,\n    nextHeight: \"inherit\" | number\n  ) => {\n    // Delay hiding the resize bars for click case\n    setTimeout(() => {\n      setIsResizing(false)\n    }, 200)\n\n    editor.update(() => {\n      const node = $getNodeByKey(nodeKey)\n\n      if ($isExcalidrawNode(node)) {\n        node.setWidth(nextWidth)\n        node.setHeight(nextHeight)\n      }\n    })\n  }\n\n  const openModal = useCallback(() => {\n    setModalOpen(true)\n  }, [])\n\n  const {\n    elements = [],\n    files = {},\n    appState = {},\n  } = useMemo(() => JSON.parse(data), [data])\n\n  const closeModal = useCallback(() => {\n    setModalOpen(false)\n    if (elements.length === 0) {\n      editor.update(() => {\n        const node = $getNodeByKey(nodeKey)\n        if (node) {\n          node.remove()\n        }\n      })\n    }\n  }, [editor, nodeKey, elements.length])\n\n  return (\n    <>\n      {isEditable && isModalOpen && (\n        <ExcalidrawModal\n          initialElements={elements}\n          initialFiles={files}\n          initialAppState={appState}\n          isShown={isModalOpen}\n          onDelete={deleteNode}\n          onClose={closeModal}\n          onSave={(els, aps, fls) => {\n            setData(els, aps, fls)\n            setModalOpen(false)\n          }}\n          closeOnClickOutside={false}\n        />\n      )}\n      {elements.length > 0 && (\n        <button\n          ref={buttonRef}\n          className={`m-0 border-0 bg-transparent p-0 ${isSelected ? \"user-select-none ring-primary ring-2 ring-offset-2\" : \"\"}`}\n        >\n          <ExcalidrawImage\n            imageContainerRef={imageContainerRef}\n            className=\"image\"\n            elements={elements}\n            files={files}\n            appState={appState}\n            width={width}\n            height={height}\n          />\n          {isSelected && isEditable && (\n            <div\n              className=\"image-edit-button\"\n              role=\"button\"\n              tabIndex={0}\n              onMouseDown={(event) => event.preventDefault()}\n              onClick={openModal}\n            />\n          )}\n          {(isSelected || isResizing) && isEditable && (\n            <ImageResizer\n              buttonRef={captionButtonRef}\n              showCaption={true}\n              setShowCaption={() => null}\n              imageRef={imageContainerRef}\n              editor={editor}\n              onResizeStart={onResizeStart}\n              onResizeEnd={onResizeEnd}\n              captionsEnabled={true}\n            />\n          )}\n        </button>\n      )}\n    </>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/editor-ui/excalidraw-component.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/toolbar/block-insert/insert-excalidraw.tsx",
      "content": "\"use client\"\n\nimport { FrameIcon } from \"lucide-react\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\nimport { INSERT_EXCALIDRAW_COMMAND } from \"@/registry/new-york-v4/editor/plugins/excalidraw-plugin\"\nimport { SelectItem } from \"@/registry/new-york-v4/ui/select\"\n\nexport function InsertExcalidraw() {\n  const { activeEditor } = useToolbarContext()\n  return (\n    <SelectItem\n      value=\"excalidraw\"\n      onPointerUp={() =>\n        activeEditor.dispatchCommand(INSERT_EXCALIDRAW_COMMAND, undefined)\n      }\n      className=\"\"\n    >\n      <div className=\"flex items-center gap-1\">\n        <FrameIcon className=\"size-4\" />\n        <span>Excalidraw</span>\n      </div>\n    </SelectItem>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/block-insert/insert-excalidraw.tsx"
    }
  ]
}