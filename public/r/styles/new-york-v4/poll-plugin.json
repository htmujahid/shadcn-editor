{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "poll-plugin",
  "type": "registry:ui",
  "dependencies": [
    "@lexical/utils"
  ],
  "registryDependencies": [
    "button",
    "dialog",
    "input",
    "label",
    "select",
    "https://shadcn-editor.vercel.app/r/toolbar-plugin.json"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/editor/plugins/poll-plugin.tsx",
      "content": "\"use client\"\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { JSX, useEffect, useState } from \"react\"\nimport * as React from \"react\"\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\"\nimport { $wrapNodeInElement } from \"@lexical/utils\"\nimport {\n  $createParagraphNode,\n  $insertNodes,\n  $isRootOrShadowRoot,\n  COMMAND_PRIORITY_EDITOR,\n  createCommand,\n  LexicalCommand,\n  LexicalEditor,\n} from \"lexical\"\n\nimport {\n  $createPollNode,\n  createPollOption,\n  PollNode,\n} from \"@/registry/new-york-v4/editor/nodes/poll-node\"\nimport { Button } from \"@/registry/new-york-v4/ui/button\"\nimport { DialogFooter } from \"@/registry/new-york-v4/ui/dialog\"\nimport { Input } from \"@/registry/new-york-v4/ui/input\"\nimport { Label } from \"@/registry/new-york-v4/ui/label\"\n\nexport const INSERT_POLL_COMMAND: LexicalCommand<string> = createCommand(\n  \"INSERT_POLL_COMMAND\"\n)\n\nexport function InsertPollDialog({\n  activeEditor,\n  onClose,\n}: {\n  activeEditor: LexicalEditor\n  onClose: () => void\n}): JSX.Element {\n  const [question, setQuestion] = useState(\"\")\n\n  const onClick = () => {\n    activeEditor.dispatchCommand(INSERT_POLL_COMMAND, question)\n    onClose()\n  }\n\n  return (\n    <>\n      <div>\n        <Label>Question</Label>\n        <Input onChange={(e) => setQuestion(e.target.value)} value={question} />\n      </div>\n      <DialogFooter>\n        <Button disabled={question.trim() === \"\"} onClick={onClick}>\n          Confirm\n        </Button>\n      </DialogFooter>\n    </>\n  )\n}\n\nexport function PollPlugin(): JSX.Element | null {\n  const [editor] = useLexicalComposerContext()\n  useEffect(() => {\n    if (!editor.hasNodes([PollNode])) {\n      throw new Error(\"PollPlugin: PollNode not registered on editor\")\n    }\n\n    return editor.registerCommand<string>(\n      INSERT_POLL_COMMAND,\n      (payload) => {\n        const pollNode = $createPollNode(payload, [\n          createPollOption(),\n          createPollOption(),\n        ])\n        $insertNodes([pollNode])\n        if ($isRootOrShadowRoot(pollNode.getParentOrThrow())) {\n          $wrapNodeInElement(pollNode, $createParagraphNode).selectEnd()\n        }\n\n        return true\n      },\n      COMMAND_PRIORITY_EDITOR\n    )\n  }, [editor])\n  return null\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/poll-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/nodes/poll-node.tsx",
      "content": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport * as React from \"react\"\nimport { JSX, Suspense } from \"react\"\nimport {\n  DecoratorNode,\n  DOMConversionMap,\n  DOMConversionOutput,\n  DOMExportOutput,\n  LexicalNode,\n  NodeKey,\n  SerializedLexicalNode,\n  Spread,\n} from \"lexical\"\n\nexport type Options = ReadonlyArray<Option>\n\nexport type Option = Readonly<{\n  text: string\n  uid: string\n  votes: Array<number>\n}>\n\nconst PollComponent = React.lazy(() => import(\"../editor-ui/poll-component\"))\n\nfunction createUID(): string {\n  return Math.random()\n    .toString(36)\n    .replace(/[^a-z]+/g, \"\")\n    .substr(0, 5)\n}\n\nexport function createPollOption(text = \"\"): Option {\n  return {\n    text,\n    uid: createUID(),\n    votes: [],\n  }\n}\n\nfunction cloneOption(\n  option: Option,\n  text: string,\n  votes?: Array<number>\n): Option {\n  return {\n    text,\n    uid: option.uid,\n    votes: votes || Array.from(option.votes),\n  }\n}\n\nexport type SerializedPollNode = Spread<\n  {\n    question: string\n    options: Options\n  },\n  SerializedLexicalNode\n>\n\nfunction $convertPollElement(domNode: HTMLElement): DOMConversionOutput | null {\n  const question = domNode.getAttribute(\"data-lexical-poll-question\")\n  const options = domNode.getAttribute(\"data-lexical-poll-options\")\n  if (question !== null && options !== null) {\n    const node = $createPollNode(question, JSON.parse(options))\n    return { node }\n  }\n  return null\n}\n\nexport class PollNode extends DecoratorNode<JSX.Element> {\n  __question: string\n  __options: Options\n\n  static getType(): string {\n    return \"poll\"\n  }\n\n  static clone(node: PollNode): PollNode {\n    return new PollNode(node.__question, node.__options, node.__key)\n  }\n\n  static importJSON(serializedNode: SerializedPollNode): PollNode {\n    const node = $createPollNode(\n      serializedNode.question,\n      serializedNode.options\n    )\n    serializedNode.options.forEach(node.addOption)\n    return node\n  }\n\n  constructor(question: string, options: Options, key?: NodeKey) {\n    super(key)\n    this.__question = question\n    this.__options = options\n  }\n\n  exportJSON(): SerializedPollNode {\n    return {\n      options: this.__options,\n      question: this.__question,\n      type: \"poll\",\n      version: 1,\n    }\n  }\n\n  addOption(option: Option): void {\n    const self = this.getWritable()\n    const options = Array.from(self.__options)\n    options.push(option)\n    self.__options = options\n  }\n\n  deleteOption(option: Option): void {\n    const self = this.getWritable()\n    const options = Array.from(self.__options)\n    const index = options.indexOf(option)\n    options.splice(index, 1)\n    self.__options = options\n  }\n\n  setOptionText(option: Option, text: string): void {\n    const self = this.getWritable()\n    const clonedOption = cloneOption(option, text)\n    const options = Array.from(self.__options)\n    const index = options.indexOf(option)\n    options[index] = clonedOption\n    self.__options = options\n  }\n\n  toggleVote(option: Option, clientID: number): void {\n    const self = this.getWritable()\n    const votes = option.votes\n    const votesClone = Array.from(votes)\n    const voteIndex = votes.indexOf(clientID)\n    if (voteIndex === -1) {\n      votesClone.push(clientID)\n    } else {\n      votesClone.splice(voteIndex, 1)\n    }\n    const clonedOption = cloneOption(option, option.text, votesClone)\n    const options = Array.from(self.__options)\n    const index = options.indexOf(option)\n    options[index] = clonedOption\n    self.__options = options\n  }\n\n  static importDOM(): DOMConversionMap | null {\n    return {\n      span: (domNode: HTMLElement) => {\n        if (!domNode.hasAttribute(\"data-lexical-poll-question\")) {\n          return null\n        }\n        return {\n          conversion: $convertPollElement,\n          priority: 2,\n        }\n      },\n    }\n  }\n\n  exportDOM(): DOMExportOutput {\n    const element = document.createElement(\"span\")\n    element.setAttribute(\"data-lexical-poll-question\", this.__question)\n    element.setAttribute(\n      \"data-lexical-poll-options\",\n      JSON.stringify(this.__options)\n    )\n    return { element }\n  }\n\n  createDOM(): HTMLElement {\n    const elem = document.createElement(\"span\")\n    elem.style.display = \"inline-block\"\n    return elem\n  }\n\n  updateDOM(): false {\n    return false\n  }\n\n  decorate(): JSX.Element {\n    return (\n      <Suspense fallback={null}>\n        <PollComponent\n          question={this.__question}\n          options={this.__options}\n          nodeKey={this.__key}\n        />\n      </Suspense>\n    )\n  }\n}\n\nexport function $createPollNode(question: string, options: Options): PollNode {\n  return new PollNode(question, options)\n}\n\nexport function $isPollNode(\n  node: LexicalNode | null | undefined\n): node is PollNode {\n  return node instanceof PollNode\n}\n",
      "type": "registry:component",
      "target": "components/editor/nodes/poll-node.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/editor-ui/poll-component.tsx",
      "content": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport * as React from \"react\"\nimport { JSX, useCallback, useEffect, useMemo, useRef, useState } from \"react\"\nimport { useCollaborationContext } from \"@lexical/react/LexicalCollaborationContext\"\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\"\nimport { useLexicalNodeSelection } from \"@lexical/react/useLexicalNodeSelection\"\nimport { mergeRegister } from \"@lexical/utils\"\nimport {\n  $getNodeByKey,\n  $getSelection,\n  $isNodeSelection,\n  BaseSelection,\n  CLICK_COMMAND,\n  COMMAND_PRIORITY_LOW,\n  KEY_BACKSPACE_COMMAND,\n  KEY_DELETE_COMMAND,\n  NodeKey,\n} from \"lexical\"\n\nimport type {\n  Option,\n  Options,\n  PollNode,\n} from \"@/registry/new-york-v4/editor/nodes/poll-node\"\nimport {\n  $isPollNode,\n  createPollOption,\n} from \"@/registry/new-york-v4/editor/nodes/poll-node\"\nimport { Button } from \"@/registry/new-york-v4/ui/button\"\nimport { Input } from \"@/registry/new-york-v4/ui/input\"\n\nfunction getTotalVotes(options: Options): number {\n  return options.reduce((totalVotes, next) => {\n    return totalVotes + next.votes.length\n  }, 0)\n}\n\nfunction PollOptionComponent({\n  option,\n  index,\n  options,\n  totalVotes,\n  withPollNode,\n}: {\n  index: number\n  option: Option\n  options: Options\n  totalVotes: number\n  withPollNode: (\n    cb: (pollNode: PollNode) => void,\n    onSelect?: () => void\n  ) => void\n}): JSX.Element {\n  const { clientID } = useCollaborationContext()\n  const checkboxRef = useRef(null)\n  const votesArray = option.votes\n  const checkedIndex = votesArray.indexOf(clientID)\n  const checked = checkedIndex !== -1\n  const votes = votesArray.length\n  const text = option.text\n\n  return (\n    <div className=\"mb-2.5 flex flex-row items-center\">\n      <div\n        className={`relative mr-2.5 flex h-[22px] w-[22px] rounded-md border border-gray-400 ${\n          checked\n            ? 'border-primary bg-primary after:pointer-events-none after:absolute after:top-1 after:left-2 after:m-0 after:block after:h-[9px] after:w-[5px] after:rotate-45 after:cursor-pointer after:border-r-2 after:border-b-2 after:border-solid after:border-white after:content-[\"\"]'\n            : \"\"\n        }`}\n      >\n        <input\n          ref={checkboxRef}\n          className=\"absolute block h-full w-full cursor-pointer border-0 opacity-0\"\n          type=\"checkbox\"\n          onChange={(e) => {\n            withPollNode((node) => {\n              node.toggleVote(option, clientID)\n            })\n          }}\n          checked={checked}\n        />\n      </div>\n      <div className=\"border-primary relative flex flex-[10px] cursor-pointer overflow-hidden rounded-md border\">\n        <div\n          className=\"transition-width bg-accent absolute top-0 left-0 z-0 h-full duration-1000 ease-in-out\"\n          style={{ width: `${votes === 0 ? 0 : (votes / totalVotes) * 100}%` }}\n        />\n        <span className=\"text-primary absolute top-1.5 right-4 text-xs\">\n          {votes > 0 && (votes === 1 ? \"1 vote\" : `${votes} votes`)}\n        </span>\n        <Input\n          type=\"text\"\n          value={text}\n          onChange={(e) => {\n            const target = e.target\n            const value = target.value\n            const selectionStart = target.selectionStart\n            const selectionEnd = target.selectionEnd\n            withPollNode(\n              (node) => {\n                node.setOptionText(option, value)\n              },\n              () => {\n                target.selectionStart = selectionStart\n                target.selectionEnd = selectionEnd\n              }\n            )\n          }}\n          placeholder={`Option ${index + 1}`}\n        />\n      </div>\n      <button\n        disabled={options.length < 3}\n        className={`relative z-0 ml-1.5 flex h-7 w-7 cursor-pointer rounded-md border-0 bg-transparent bg-[position:6px_6px] bg-no-repeat opacity-30 before:absolute before:top-1.5 before:left-[13px] before:block before:h-[15px] before:w-0.5 before:-rotate-45 before:bg-gray-400 before:content-[''] after:absolute after:top-1.5 after:left-[13px] after:block after:h-[15px] after:w-0.5 after:rotate-45 after:bg-gray-400 after:content-[''] hover:bg-gray-100 hover:opacity-100 disabled:cursor-not-allowed disabled:hover:bg-transparent disabled:hover:opacity-30`}\n        aria-label=\"Remove\"\n        onClick={() => {\n          withPollNode((node) => {\n            node.deleteOption(option)\n          })\n        }}\n      />\n    </div>\n  )\n}\n\nexport default function PollComponent({\n  question,\n  options,\n  nodeKey,\n}: {\n  nodeKey: NodeKey\n  options: Options\n  question: string\n}): JSX.Element {\n  const [editor] = useLexicalComposerContext()\n  const totalVotes = useMemo(() => getTotalVotes(options), [options])\n  const [isSelected, setSelected, clearSelection] =\n    useLexicalNodeSelection(nodeKey)\n  const [selection, setSelection] = useState<BaseSelection | null>(null)\n  const ref = useRef(null)\n\n  const $onDelete = useCallback(\n    (payload: KeyboardEvent) => {\n      const deleteSelection = $getSelection()\n      if (isSelected && $isNodeSelection(deleteSelection)) {\n        const event: KeyboardEvent = payload\n        event.preventDefault()\n        editor.update(() => {\n          deleteSelection.getNodes().forEach((node) => {\n            if ($isPollNode(node)) {\n              node.remove()\n            }\n          })\n        })\n      }\n      return false\n    },\n    [editor, isSelected]\n  )\n\n  useEffect(() => {\n    return mergeRegister(\n      editor.registerUpdateListener(({ editorState }) => {\n        setSelection(editorState.read(() => $getSelection()))\n      }),\n      editor.registerCommand<MouseEvent>(\n        CLICK_COMMAND,\n        (payload) => {\n          const event = payload\n\n          if (event.target === ref.current) {\n            if (!event.shiftKey) {\n              clearSelection()\n            }\n            setSelected(!isSelected)\n            return true\n          }\n\n          return false\n        },\n        COMMAND_PRIORITY_LOW\n      ),\n      editor.registerCommand(\n        KEY_DELETE_COMMAND,\n        $onDelete,\n        COMMAND_PRIORITY_LOW\n      ),\n      editor.registerCommand(\n        KEY_BACKSPACE_COMMAND,\n        $onDelete,\n        COMMAND_PRIORITY_LOW\n      )\n    )\n  }, [clearSelection, editor, isSelected, nodeKey, $onDelete, setSelected])\n\n  const withPollNode = (\n    cb: (node: PollNode) => void,\n    onUpdate?: () => void\n  ): void => {\n    editor.update(\n      () => {\n        const node = $getNodeByKey(nodeKey)\n        if ($isPollNode(node)) {\n          cb(node)\n        }\n      },\n      { onUpdate }\n    )\n  }\n\n  const addOption = () => {\n    withPollNode((node) => {\n      node.addOption(createPollOption())\n    })\n  }\n\n  const isFocused = $isNodeSelection(selection) && isSelected\n\n  return (\n    <div\n      className={`bg-background max-w-[600px] min-w-[400px] cursor-pointer rounded-lg border border-gray-200 select-none ${\n        isFocused ? \"outline-primary outline outline-2\" : \"\"\n      }`}\n      ref={ref}\n    >\n      <div className=\"m-4 cursor-default\">\n        <h2 className=\"m-0 mb-4 text-center text-lg text-gray-600\">\n          {question}\n        </h2>\n        {options.map((option, index) => {\n          const key = option.uid\n          return (\n            <PollOptionComponent\n              key={key}\n              withPollNode={withPollNode}\n              option={option}\n              index={index}\n              options={options}\n              totalVotes={totalVotes}\n            />\n          )\n        })}\n        <div className=\"flex justify-center\">\n          <Button onClick={addOption} size=\"sm\">\n            Add Option\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/editor-ui/poll-component.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/toolbar/block-insert/insert-poll.tsx",
      "content": "\"use client\"\n\nimport { ListChecksIcon } from \"lucide-react\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\nimport { InsertPollDialog } from \"@/registry/new-york-v4/editor/plugins/poll-plugin\"\nimport { SelectItem } from \"@/registry/new-york-v4/ui/select\"\n\nexport function InsertPoll() {\n  const { activeEditor, showModal } = useToolbarContext()\n\n  return (\n    <SelectItem\n      value=\"poll\"\n      onPointerUp={() =>\n        showModal(\"Insert Poll\", (onClose) => (\n          <InsertPollDialog activeEditor={activeEditor} onClose={onClose} />\n        ))\n      }\n      className=\"\"\n    >\n      <div className=\"flex items-center gap-1\">\n        <ListChecksIcon className=\"size-4\" />\n        <span>Poll</span>\n      </div>\n    </SelectItem>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/block-insert/insert-poll.tsx"
    }
  ]
}