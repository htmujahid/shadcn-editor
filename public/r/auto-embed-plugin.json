{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "auto-embed-plugin",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "files": [
    {
      "path": "editor/plugins/embeds/auto-embed-plugin.tsx",
      "content": "'use client'\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nimport { useMemo, useState, JSX } from 'react'\r\n\r\nimport {\r\n  AutoEmbedOption,\r\n  EmbedConfig,\r\n  EmbedMatchResult,\r\n  LexicalAutoEmbedPlugin,\r\n  URL_MATCHER,\r\n} from '@lexical/react/LexicalAutoEmbedPlugin'\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport { PopoverPortal } from '@radix-ui/react-popover'\r\nimport type { LexicalEditor } from 'lexical'\r\nimport { FigmaIcon, TwitterIcon, YoutubeIcon } from 'lucide-react'\r\n\r\nimport { Button } from '@/registry/default/ui/button'\r\nimport {\r\n  Command,\r\n  CommandGroup,\r\n  CommandItem,\r\n  CommandList,\r\n} from '@/registry/default/ui/command'\r\nimport { DialogFooter } from '@/registry/default/ui/dialog'\r\nimport { Input } from '@/registry/default/ui/input'\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from '@/registry/default/ui/popover'\r\n\r\nimport { useEditorModal } from '@/registry/default/editor/editor-hooks/use-modal'\r\nimport { INSERT_FIGMA_COMMAND } from '@/registry/default/editor/plugins/embeds/figma-plugin'\r\nimport { INSERT_TWEET_COMMAND } from '@/registry/default/editor/plugins/embeds/twitter-plugin'\r\nimport { INSERT_YOUTUBE_COMMAND } from '@/registry/default/editor/plugins/embeds/youtube-plugin'\r\n\r\nexport interface CustomEmbedConfig extends EmbedConfig {\r\n  // Human readable name of the embeded content e.g. Tweet or Google Map.\r\n  contentName: string\r\n\r\n  // Icon for display.\r\n  icon?: JSX.Element\r\n\r\n  // An example of a matching url https://twitter.com/jack/status/20\r\n  exampleUrl: string\r\n\r\n  // For extra searching.\r\n  keywords: Array<string>\r\n\r\n  // Embed a Figma Project.\r\n  description?: string\r\n}\r\n\r\nexport const YoutubeEmbedConfig: CustomEmbedConfig = {\r\n  contentName: 'Youtube Video',\r\n\r\n  exampleUrl: 'https://www.youtube.com/watch?v=jNQXAC9IVRw',\r\n\r\n  // Icon for display.\r\n  icon: <YoutubeIcon className=\"size-4\" />,\r\n\r\n  insertNode: (editor: LexicalEditor, result: EmbedMatchResult) => {\r\n    editor.dispatchCommand(INSERT_YOUTUBE_COMMAND, result.id)\r\n  },\r\n\r\n  keywords: ['youtube', 'video'],\r\n\r\n  // Determine if a given URL is a match and return url data.\r\n  parseUrl: async (url: string) => {\r\n    const match =\r\n      /^.*(youtu\\.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/.exec(url)\r\n\r\n    const id = match ? (match?.[2].length === 11 ? match[2] : null) : null\r\n\r\n    if (id != null) {\r\n      return {\r\n        id,\r\n        url,\r\n      }\r\n    }\r\n\r\n    return null\r\n  },\r\n\r\n  type: 'youtube-video',\r\n}\r\n\r\nexport const TwitterEmbedConfig: CustomEmbedConfig = {\r\n  // e.g. Tweet or Google Map.\r\n  contentName: 'Tweet',\r\n\r\n  exampleUrl: 'https://twitter.com/jack/status/20',\r\n\r\n  // Icon for display.\r\n  icon: <TwitterIcon className=\"size-4\" />,\r\n\r\n  // Create the Lexical embed node from the url data.\r\n  insertNode: (editor: LexicalEditor, result: EmbedMatchResult) => {\r\n    editor.dispatchCommand(INSERT_TWEET_COMMAND, result.id)\r\n  },\r\n\r\n  // For extra searching.\r\n  keywords: ['tweet', 'twitter'],\r\n\r\n  // Determine if a given URL is a match and return url data.\r\n  parseUrl: (text: string) => {\r\n    const match =\r\n      /^https:\\/\\/(twitter|x)\\.com\\/(#!\\/)?(\\w+)\\/status(es)*\\/(\\d+)/.exec(text)\r\n\r\n    if (match != null) {\r\n      return {\r\n        id: match[5],\r\n        url: match[1],\r\n      }\r\n    }\r\n\r\n    return null\r\n  },\r\n\r\n  type: 'tweet',\r\n}\r\n\r\nexport const FigmaEmbedConfig: CustomEmbedConfig = {\r\n  contentName: 'Figma Document',\r\n\r\n  exampleUrl: 'https://www.figma.com/file/LKQ4FJ4bTnCSjedbRpk931/Sample-File',\r\n\r\n  icon: <FigmaIcon className=\"size-4\" />,\r\n\r\n  insertNode: (editor: LexicalEditor, result: EmbedMatchResult) => {\r\n    editor.dispatchCommand(INSERT_FIGMA_COMMAND, result.id)\r\n  },\r\n\r\n  keywords: ['figma', 'figma.com', 'mock-up'],\r\n\r\n  // Determine if a given URL is a match and return url data.\r\n  parseUrl: (text: string) => {\r\n    const match =\r\n      /https:\\/\\/([\\w.-]+\\.)?figma.com\\/(file|proto)\\/([0-9a-zA-Z]{22,128})(?:\\/.*)?$/.exec(\r\n        text\r\n      )\r\n\r\n    if (match != null) {\r\n      return {\r\n        id: match[3],\r\n        url: match[0],\r\n      }\r\n    }\r\n\r\n    return null\r\n  },\r\n\r\n  type: 'figma',\r\n}\r\n\r\nexport const EmbedConfigs = [\r\n  TwitterEmbedConfig,\r\n  YoutubeEmbedConfig,\r\n  FigmaEmbedConfig,\r\n]\r\n\r\nconst debounce = (callback: (text: string) => void, delay: number) => {\r\n  let timeoutId: number\r\n  return (text: string) => {\r\n    window.clearTimeout(timeoutId)\r\n    timeoutId = window.setTimeout(() => {\r\n      callback(text)\r\n    }, delay)\r\n  }\r\n}\r\n\r\nexport function AutoEmbedDialog({\r\n  embedConfig,\r\n  onClose,\r\n}: {\r\n  embedConfig: CustomEmbedConfig\r\n  onClose: () => void\r\n}): JSX.Element {\r\n  const [text, setText] = useState('')\r\n  const [editor] = useLexicalComposerContext()\r\n  const [embedResult, setEmbedResult] = useState<EmbedMatchResult | null>(null)\r\n\r\n  const validateText = useMemo(\r\n    () =>\r\n      debounce((inputText: string) => {\r\n        const urlMatch = URL_MATCHER.exec(inputText)\r\n        if (embedConfig != null && inputText != null && urlMatch != null) {\r\n          Promise.resolve(embedConfig.parseUrl(inputText)).then(\r\n            (parseResult) => {\r\n              setEmbedResult(parseResult)\r\n            }\r\n          )\r\n        } else if (embedResult != null) {\r\n          setEmbedResult(null)\r\n        }\r\n      }, 200),\r\n    [embedConfig, embedResult]\r\n  )\r\n\r\n  const onClick = () => {\r\n    if (embedResult != null) {\r\n      embedConfig.insertNode(editor, embedResult)\r\n      onClose()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"\">\r\n      <div className=\"space-y-4\">\r\n        <Input\r\n          type=\"text\"\r\n          placeholder={embedConfig.exampleUrl}\r\n          value={text}\r\n          data-test-id={`${embedConfig.type}-embed-modal-url`}\r\n          onChange={(e) => {\r\n            const { value } = e.target\r\n            setText(value)\r\n            validateText(value)\r\n          }}\r\n        />\r\n        <DialogFooter>\r\n          <Button\r\n            disabled={!embedResult}\r\n            onClick={onClick}\r\n            data-test-id={`${embedConfig.type}-embed-modal-submit-btn`}\r\n          >\r\n            Embed\r\n          </Button>\r\n        </DialogFooter>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function AutoEmbedPlugin(): JSX.Element {\r\n  const [modal, showModal] = useEditorModal()\r\n\r\n  const openEmbedModal = (embedConfig: CustomEmbedConfig) => {\r\n    showModal(`Embed ${embedConfig.contentName}`, (onClose) => (\r\n      <AutoEmbedDialog embedConfig={embedConfig} onClose={onClose} />\r\n    ))\r\n  }\r\n\r\n  const getMenuOptions = (\r\n    activeEmbedConfig: CustomEmbedConfig,\r\n    embedFn: () => void,\r\n    dismissFn: () => void\r\n  ) => {\r\n    return [\r\n      new AutoEmbedOption('Dismiss', {\r\n        onSelect: dismissFn,\r\n      }),\r\n      new AutoEmbedOption(`Embed ${activeEmbedConfig.contentName}`, {\r\n        onSelect: embedFn,\r\n      }),\r\n    ]\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {modal}\r\n      <LexicalAutoEmbedPlugin<CustomEmbedConfig>\r\n        embedConfigs={EmbedConfigs}\r\n        onOpenEmbedModalForConfig={openEmbedModal}\r\n        getMenuOptions={getMenuOptions}\r\n        menuRenderFn={(\r\n          anchorElementRef,\r\n          {\r\n            selectedIndex,\r\n            options,\r\n            selectOptionAndCleanUp,\r\n            setHighlightedIndex,\r\n          }\r\n        ) => {\r\n          return anchorElementRef.current ? (\r\n            <Popover open={true}>\r\n              <PopoverPortal container={anchorElementRef.current}>\r\n                <div className=\"-translate-y-full transform\">\r\n                  <PopoverTrigger />\r\n                  <PopoverContent\r\n                    className=\"w-[200px] p-0\"\r\n                    align=\"start\"\r\n                    side=\"right\"\r\n                  >\r\n                    <Command>\r\n                      <CommandList>\r\n                        <CommandGroup>\r\n                          {options.map((option, i: number) => (\r\n                            <CommandItem\r\n                              key={option.key}\r\n                              value={option.title}\r\n                              onSelect={() => {\r\n                                selectOptionAndCleanUp(option)\r\n                              }}\r\n                              className=\"flex items-center gap-2\"\r\n                            >\r\n                              {option.title}\r\n                            </CommandItem>\r\n                          ))}\r\n                        </CommandGroup>\r\n                      </CommandList>\r\n                    </Command>\r\n                  </PopoverContent>\r\n                </div>\r\n              </PopoverPortal>\r\n            </Popover>\r\n          ) : null\r\n        }}\r\n      />\r\n    </>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/embeds/auto-embed-plugin.tsx"
    },
    {
      "path": "editor/plugins/embeds/figma-plugin.tsx",
      "content": "'use client'\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nimport { useEffect, JSX } from 'react'\r\n\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport { $insertNodeToNearestRoot } from '@lexical/utils'\r\nimport { COMMAND_PRIORITY_EDITOR, LexicalCommand, createCommand } from 'lexical'\r\n\r\nimport { $createFigmaNode, FigmaNode } from '@/registry/default/editor/nodes/embeds/figma-node'\r\n\r\nexport const INSERT_FIGMA_COMMAND: LexicalCommand<string> = createCommand(\r\n  'INSERT_FIGMA_COMMAND'\r\n)\r\n\r\nexport function FigmaPlugin(): JSX.Element | null {\r\n  const [editor] = useLexicalComposerContext()\r\n\r\n  useEffect(() => {\r\n    if (!editor.hasNodes([FigmaNode])) {\r\n      throw new Error('FigmaPlugin: FigmaNode not registered on editor')\r\n    }\r\n\r\n    return editor.registerCommand<string>(\r\n      INSERT_FIGMA_COMMAND,\r\n      (payload) => {\r\n        const figmaNode = $createFigmaNode(payload)\r\n        $insertNodeToNearestRoot(figmaNode)\r\n        return true\r\n      },\r\n      COMMAND_PRIORITY_EDITOR\r\n    )\r\n  }, [editor])\r\n\r\n  return null\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/embeds/figma-plugin.tsx"
    },
    {
      "path": "editor/plugins/embeds/twitter-plugin.tsx",
      "content": "'use client'\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nimport { useEffect, JSX } from 'react'\r\n\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport { $insertNodeToNearestRoot } from '@lexical/utils'\r\nimport { COMMAND_PRIORITY_EDITOR, LexicalCommand, createCommand } from 'lexical'\r\n\r\nimport { $createTweetNode, TweetNode } from '@/registry/default/editor/nodes/embeds/tweet-node'\r\n\r\nexport const INSERT_TWEET_COMMAND: LexicalCommand<string> = createCommand(\r\n  'INSERT_TWEET_COMMAND'\r\n)\r\n\r\nexport function TwitterPlugin(): JSX.Element | null {\r\n  const [editor] = useLexicalComposerContext()\r\n\r\n  useEffect(() => {\r\n    if (!editor.hasNodes([TweetNode])) {\r\n      throw new Error('TwitterPlugin: TweetNode not registered on editor')\r\n    }\r\n\r\n    return editor.registerCommand<string>(\r\n      INSERT_TWEET_COMMAND,\r\n      (payload) => {\r\n        const tweetNode = $createTweetNode(payload)\r\n        $insertNodeToNearestRoot(tweetNode)\r\n\r\n        return true\r\n      },\r\n      COMMAND_PRIORITY_EDITOR\r\n    )\r\n  }, [editor])\r\n\r\n  return null\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/embeds/twitter-plugin.tsx"
    },
    {
      "path": "editor/plugins/embeds/youtube-plugin.tsx",
      "content": "'use client'\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nimport { useEffect, JSX } from 'react'\r\n\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport { $insertNodeToNearestRoot } from '@lexical/utils'\r\nimport { COMMAND_PRIORITY_EDITOR, LexicalCommand, createCommand } from 'lexical'\r\n\r\nimport {\r\n  $createYouTubeNode,\r\n  YouTubeNode,\r\n} from '@/registry/default/editor/nodes/embeds/youtube-node'\r\n\r\nexport const INSERT_YOUTUBE_COMMAND: LexicalCommand<string> = createCommand(\r\n  'INSERT_YOUTUBE_COMMAND'\r\n)\r\n\r\nexport function YouTubePlugin(): JSX.Element | null {\r\n  const [editor] = useLexicalComposerContext()\r\n\r\n  useEffect(() => {\r\n    if (!editor.hasNodes([YouTubeNode])) {\r\n      throw new Error('YouTubePlugin: YouTubeNode not registered on editor')\r\n    }\r\n\r\n    return editor.registerCommand<string>(\r\n      INSERT_YOUTUBE_COMMAND,\r\n      (payload) => {\r\n        const youTubeNode = $createYouTubeNode(payload)\r\n        $insertNodeToNearestRoot(youTubeNode)\r\n\r\n        return true\r\n      },\r\n      COMMAND_PRIORITY_EDITOR\r\n    )\r\n  }, [editor])\r\n\r\n  return null\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/embeds/youtube-plugin.tsx"
    }
  ]
}