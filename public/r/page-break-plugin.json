{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "page-break-plugin",
  "type": "registry:ui",
  "dependencies": [
    "@lexical/utils"
  ],
  "registryDependencies": [
    "select",
    "https://shadcn-editor.vercel.app/r/toolbar-plugin.json"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/editor/plugins/page-break-plugin.tsx",
      "content": "\"use client\"\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { JSX, useEffect } from \"react\"\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\"\nimport { $insertNodeToNearestRoot, mergeRegister } from \"@lexical/utils\"\nimport {\n  $getSelection,\n  $isRangeSelection,\n  COMMAND_PRIORITY_EDITOR,\n  createCommand,\n  LexicalCommand,\n} from \"lexical\"\n\nimport {\n  $createPageBreakNode,\n  PageBreakNode,\n} from \"@/registry/new-york-v4/editor/nodes/page-break-node\"\n\nexport const INSERT_PAGE_BREAK: LexicalCommand<undefined> = createCommand()\n\nexport function PageBreakPlugin(): JSX.Element | null {\n  const [editor] = useLexicalComposerContext()\n\n  useEffect(() => {\n    if (!editor.hasNodes([PageBreakNode])) {\n      throw new Error(\n        \"PageBreakPlugin: PageBreakNode is not registered on editor\"\n      )\n    }\n\n    return mergeRegister(\n      editor.registerCommand(\n        INSERT_PAGE_BREAK,\n        () => {\n          const selection = $getSelection()\n\n          if (!$isRangeSelection(selection)) {\n            return false\n          }\n\n          const focusNode = selection.focus.getNode()\n          if (focusNode !== null) {\n            const pgBreak = $createPageBreakNode()\n            $insertNodeToNearestRoot(pgBreak)\n          }\n\n          return true\n        },\n        COMMAND_PRIORITY_EDITOR\n      )\n    )\n  }, [editor])\n\n  return null\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/page-break-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/nodes/page-break-node.tsx",
      "content": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { useCallback, useEffect } from \"react\"\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\"\nimport { useLexicalNodeSelection } from \"@lexical/react/useLexicalNodeSelection\"\nimport { mergeRegister } from \"@lexical/utils\"\nimport {\n  $getSelection,\n  $isNodeSelection,\n  CLICK_COMMAND,\n  COMMAND_PRIORITY_HIGH,\n  COMMAND_PRIORITY_LOW,\n  DecoratorNode,\n  DOMConversionMap,\n  DOMConversionOutput,\n  KEY_BACKSPACE_COMMAND,\n  KEY_DELETE_COMMAND,\n  LexicalNode,\n  NodeKey,\n  SerializedLexicalNode,\n} from \"lexical\"\n\nexport type SerializedPageBreakNode = SerializedLexicalNode\n\nfunction PageBreakComponent({ nodeKey }: { nodeKey: NodeKey }) {\n  const [editor] = useLexicalComposerContext()\n  const [isSelected, setSelected, clearSelection] =\n    useLexicalNodeSelection(nodeKey)\n\n  const $onDelete = useCallback(\n    (event: KeyboardEvent) => {\n      event.preventDefault()\n      const deleteSelection = $getSelection()\n      if (isSelected && $isNodeSelection(deleteSelection)) {\n        editor.update(() => {\n          deleteSelection.getNodes().forEach((node) => {\n            if ($isPageBreakNode(node)) {\n              node.remove()\n            }\n          })\n        })\n      }\n      return false\n    },\n    [editor, isSelected]\n  )\n\n  useEffect(() => {\n    return mergeRegister(\n      editor.registerCommand(\n        CLICK_COMMAND,\n        (event: MouseEvent) => {\n          const pbElem = editor.getElementByKey(nodeKey)\n\n          if (event.target === pbElem) {\n            if (!event.shiftKey) {\n              clearSelection()\n            }\n            setSelected(!isSelected)\n            return true\n          }\n\n          return false\n        },\n        COMMAND_PRIORITY_LOW\n      ),\n      editor.registerCommand(\n        KEY_DELETE_COMMAND,\n        $onDelete,\n        COMMAND_PRIORITY_LOW\n      ),\n      editor.registerCommand(\n        KEY_BACKSPACE_COMMAND,\n        $onDelete,\n        COMMAND_PRIORITY_LOW\n      )\n    )\n  }, [clearSelection, editor, isSelected, nodeKey, $onDelete, setSelected])\n\n  useEffect(() => {\n    const pbElem = editor.getElementByKey(nodeKey)\n    if (pbElem !== null) {\n      if (isSelected) {\n        pbElem.classList.add(\"!border-[var(--editor-color-primary,#4766cb)]\")\n        pbElem.classList.add(\n          \"!after:text-[var(--editor-color-primary,#4766cb)]\"\n        )\n        pbElem.classList.add(\"!before:opacity-100\")\n      } else {\n        pbElem.classList.remove(\"!border-[var(--editor-color-primary,#4766cb)]\")\n        pbElem.classList.remove(\n          \"!after:text-[var(--editor-color-primary,#4766cb)]\"\n        )\n        pbElem.classList.remove(\"!before:opacity-100\")\n      }\n    }\n  }, [editor, isSelected, nodeKey])\n\n  return null\n}\n\nexport class PageBreakNode extends DecoratorNode<JSX.Element> {\n  static getType(): string {\n    return \"page-break\"\n  }\n\n  static clone(node: PageBreakNode): PageBreakNode {\n    return new PageBreakNode(node.__key)\n  }\n\n  static importJSON(serializedNode: SerializedPageBreakNode): PageBreakNode {\n    return $createPageBreakNode()\n  }\n\n  static importDOM(): DOMConversionMap | null {\n    return {\n      figure: (domNode: HTMLElement) => {\n        const tp = domNode.getAttribute(\"type\")\n        if (tp !== this.getType()) {\n          return null\n        }\n\n        return {\n          conversion: $convertPageBreakElement,\n          priority: COMMAND_PRIORITY_HIGH,\n        }\n      },\n    }\n  }\n\n  exportJSON(): SerializedLexicalNode {\n    return {\n      type: this.getType(),\n      version: 1,\n    }\n  }\n\n  createDOM(): HTMLElement {\n    const el = document.createElement(\"figure\")\n    el.setAttribute(\"type\", this.getType())\n    el.style.pageBreakAfter = \"always\"\n    el.className = `\n      relative block w-[calc(100%+56px)] overflow-visible \n      -ml-[28px] mt-7 mb-7\n      border-0 border-t border-b border-dashed border-[var(--editor-color-secondary,#eee)]\n      bg-[var(--editor-color-secondary,#eee)]\n      before:content-[''] \n      before:absolute before:top-1/2 before:-translate-y-1/2\n      before:left-10 before:opacity-50\n      before:bg-cover before:w-4 before:h-4\n      after:content-['PAGE_BREAK']\n      after:absolute after:top-1/2 after:left-1/2 \n      after:-translate-x-1/2 after:-translate-y-1/2\n      after:block after:py-0.5 after:px-1.5\n      after:border after:border-solid after:border-[#ccc]\n      after:bg-white after:text-xs after:text-black after:font-semibold\n    `\n    return el\n  }\n\n  getTextContent(): string {\n    return \"\\n\"\n  }\n\n  isInline(): false {\n    return false\n  }\n\n  updateDOM(): boolean {\n    return false\n  }\n\n  decorate(): JSX.Element {\n    return <PageBreakComponent nodeKey={this.__key} />\n  }\n}\n\nfunction $convertPageBreakElement(): DOMConversionOutput {\n  return { node: $createPageBreakNode() }\n}\n\nexport function $createPageBreakNode(): PageBreakNode {\n  return new PageBreakNode()\n}\n\nexport function $isPageBreakNode(\n  node: LexicalNode | null | undefined\n): node is PageBreakNode {\n  return node instanceof PageBreakNode\n}\n",
      "type": "registry:component",
      "target": "components/editor/nodes/page-break-node.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/toolbar/block-insert/insert-page-break.tsx",
      "content": "\"use client\"\n\nimport { SquareSplitVerticalIcon } from \"lucide-react\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\nimport { INSERT_PAGE_BREAK } from \"@/registry/new-york-v4/editor/plugins/page-break-plugin\"\nimport { SelectItem } from \"@/registry/new-york-v4/ui/select\"\n\nexport function InsertPageBreak() {\n  const { activeEditor } = useToolbarContext()\n\n  return (\n    <SelectItem\n      value=\"page-break\"\n      onPointerUp={() =>\n        activeEditor.dispatchCommand(INSERT_PAGE_BREAK, undefined)\n      }\n      className=\"\"\n    >\n      <div className=\"flex items-center gap-1\">\n        <SquareSplitVerticalIcon className=\"size-4\" />\n        <span>Page Break</span>\n      </div>\n    </SelectItem>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/block-insert/insert-page-break.tsx"
    }
  ]
}