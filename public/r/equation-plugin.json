{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "equation-plugin",
  "type": "registry:ui",
  "dependencies": [
    "katex",
    "react-error-boundary",
    "@lexical/utils",
    "@lexical/markdown"
  ],
  "registryDependencies": [
    "button",
    "checkbox",
    "input",
    "label",
    "select",
    "textarea",
    "https://shadcn-editor.vercel.app/r/toolbar-plugin.json"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/editor/plugins/equations-plugin.tsx",
      "content": "\"use client\"\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { JSX, useCallback, useEffect } from \"react\"\nimport * as React from \"react\"\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\"\nimport { $wrapNodeInElement } from \"@lexical/utils\"\n\nimport \"katex/dist/katex.css\"\n\nimport {\n  $createParagraphNode,\n  $insertNodes,\n  $isRootOrShadowRoot,\n  COMMAND_PRIORITY_EDITOR,\n  createCommand,\n  LexicalCommand,\n  LexicalEditor,\n} from \"lexical\"\n\nimport KatexEquationAlterer from \"@/registry/new-york-v4/editor/editor-ui/katex-equation-alterer\"\nimport {\n  $createEquationNode,\n  EquationNode,\n} from \"@/registry/new-york-v4/editor/nodes/equation-node\"\n\ntype CommandPayload = {\n  equation: string\n  inline: boolean\n}\n\nexport const INSERT_EQUATION_COMMAND: LexicalCommand<CommandPayload> =\n  createCommand(\"INSERT_EQUATION_COMMAND\")\n\nexport function InsertEquationDialog({\n  activeEditor,\n  onClose,\n}: {\n  activeEditor: LexicalEditor\n  onClose: () => void\n}): JSX.Element {\n  const onEquationConfirm = useCallback(\n    (equation: string, inline: boolean) => {\n      activeEditor.dispatchCommand(INSERT_EQUATION_COMMAND, {\n        equation,\n        inline,\n      })\n      onClose()\n    },\n    [activeEditor, onClose]\n  )\n\n  return <KatexEquationAlterer onConfirm={onEquationConfirm} />\n}\n\nexport function EquationsPlugin(): JSX.Element | null {\n  const [editor] = useLexicalComposerContext()\n\n  useEffect(() => {\n    if (!editor.hasNodes([EquationNode])) {\n      throw new Error(\n        \"EquationsPlugins: EquationsNode not registered on editor\"\n      )\n    }\n\n    return editor.registerCommand<CommandPayload>(\n      INSERT_EQUATION_COMMAND,\n      (payload) => {\n        const { equation, inline } = payload\n        const equationNode = $createEquationNode(equation, inline)\n\n        $insertNodes([equationNode])\n        if ($isRootOrShadowRoot(equationNode.getParentOrThrow())) {\n          $wrapNodeInElement(equationNode, $createParagraphNode).selectEnd()\n        }\n\n        return true\n      },\n      COMMAND_PRIORITY_EDITOR\n    )\n  }, [editor])\n\n  return null\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/equations-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/nodes/equation-node.tsx",
      "content": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport * as React from \"react\"\nimport { JSX, Suspense } from \"react\"\nimport katex from \"katex\"\nimport type {\n  DOMConversionMap,\n  DOMConversionOutput,\n  EditorConfig,\n  LexicalNode,\n  NodeKey,\n  SerializedLexicalNode,\n  Spread,\n} from \"lexical\"\nimport { $applyNodeReplacement, DecoratorNode, DOMExportOutput } from \"lexical\"\n\nconst EquationComponent = React.lazy(\n  () => import(\"../editor-ui/equation-component\")\n)\n\nexport type SerializedEquationNode = Spread<\n  {\n    equation: string\n    inline: boolean\n  },\n  SerializedLexicalNode\n>\n\nfunction $convertEquationElement(\n  domNode: HTMLElement\n): null | DOMConversionOutput {\n  let equation = domNode.getAttribute(\"data-lexical-equation\")\n  const inline = domNode.getAttribute(\"data-lexical-inline\") === \"true\"\n  // Decode the equation from base64\n  equation = atob(equation || \"\")\n  if (equation) {\n    const node = $createEquationNode(equation, inline)\n    return { node }\n  }\n\n  return null\n}\n\nexport class EquationNode extends DecoratorNode<JSX.Element> {\n  __equation: string\n  __inline: boolean\n\n  static getType(): string {\n    return \"equation\"\n  }\n\n  static clone(node: EquationNode): EquationNode {\n    return new EquationNode(node.__equation, node.__inline, node.__key)\n  }\n\n  constructor(equation: string, inline?: boolean, key?: NodeKey) {\n    super(key)\n    this.__equation = equation\n    this.__inline = inline ?? false\n  }\n\n  static importJSON(serializedNode: SerializedEquationNode): EquationNode {\n    const node = $createEquationNode(\n      serializedNode.equation,\n      serializedNode.inline\n    )\n    return node\n  }\n\n  exportJSON(): SerializedEquationNode {\n    return {\n      equation: this.getEquation(),\n      inline: this.__inline,\n      type: \"equation\",\n      version: 1,\n    }\n  }\n\n  createDOM(_config: EditorConfig): HTMLElement {\n    const element = document.createElement(this.__inline ? \"span\" : \"div\")\n    // EquationNodes should implement `user-action:none` in their CSS to avoid issues with deletion on Android.\n    element.className =\n      \"editor-equation user-action-none cursor-default focus:ring-2 focus:ring-primary focus:ring-offset-2 inline-block\"\n    return element\n  }\n\n  exportDOM(): DOMExportOutput {\n    const element = document.createElement(this.__inline ? \"span\" : \"div\")\n    // Encode the equation as base64 to avoid issues with special characters\n    const equation = btoa(this.__equation)\n    element.setAttribute(\"data-lexical-equation\", equation)\n    element.setAttribute(\"data-lexical-inline\", `${this.__inline}`)\n    katex.render(this.__equation, element, {\n      displayMode: !this.__inline, // true === block display //\n      errorColor: \"#cc0000\",\n      output: \"html\",\n      strict: \"warn\",\n      throwOnError: false,\n      trust: false,\n    })\n    return { element }\n  }\n\n  static importDOM(): DOMConversionMap | null {\n    return {\n      div: (domNode: HTMLElement) => {\n        if (!domNode.hasAttribute(\"data-lexical-equation\")) {\n          return null\n        }\n        return {\n          conversion: $convertEquationElement,\n          priority: 2,\n        }\n      },\n      span: (domNode: HTMLElement) => {\n        if (!domNode.hasAttribute(\"data-lexical-equation\")) {\n          return null\n        }\n        return {\n          conversion: $convertEquationElement,\n          priority: 1,\n        }\n      },\n    }\n  }\n\n  updateDOM(prevNode: EquationNode): boolean {\n    // If the inline property changes, replace the element\n    return this.__inline !== prevNode.__inline\n  }\n\n  getTextContent(): string {\n    return this.__equation\n  }\n\n  getEquation(): string {\n    return this.__equation\n  }\n\n  setEquation(equation: string): void {\n    const writable = this.getWritable()\n    writable.__equation = equation\n  }\n\n  decorate(): JSX.Element {\n    return (\n      <Suspense fallback={null}>\n        <EquationComponent\n          equation={this.__equation}\n          inline={this.__inline}\n          nodeKey={this.__key}\n        />\n      </Suspense>\n    )\n  }\n}\n\nexport function $createEquationNode(\n  equation = \"\",\n  inline = false\n): EquationNode {\n  const equationNode = new EquationNode(equation, inline)\n  return $applyNodeReplacement(equationNode)\n}\n\nexport function $isEquationNode(\n  node: LexicalNode | null | undefined\n): node is EquationNode {\n  return node instanceof EquationNode\n}\n",
      "type": "registry:component",
      "target": "components/editor/nodes/equation-node.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/editor-ui/equation-component.tsx",
      "content": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport * as React from \"react\"\nimport { JSX, useCallback, useEffect, useRef, useState } from \"react\"\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\"\nimport { useLexicalEditable } from \"@lexical/react/useLexicalEditable\"\nimport { mergeRegister } from \"@lexical/utils\"\nimport {\n  $getNodeByKey,\n  $getSelection,\n  $isNodeSelection,\n  COMMAND_PRIORITY_HIGH,\n  KEY_ESCAPE_COMMAND,\n  NodeKey,\n  SELECTION_CHANGE_COMMAND,\n} from \"lexical\"\nimport { ErrorBoundary } from \"react-error-boundary\"\n\nimport EquationEditor from \"@/registry/new-york-v4/editor/editor-ui/equation-editor\"\nimport KatexRenderer from \"@/registry/new-york-v4/editor/editor-ui/katex-renderer\"\nimport { $isEquationNode } from \"@/registry/new-york-v4/editor/nodes/equation-node\"\n\ntype EquationComponentProps = {\n  equation: string\n  inline: boolean\n  nodeKey: NodeKey\n}\n\nexport default function EquationComponent({\n  equation,\n  inline,\n  nodeKey,\n}: EquationComponentProps): JSX.Element {\n  const [editor] = useLexicalComposerContext()\n  const isEditable = useLexicalEditable()\n  const [equationValue, setEquationValue] = useState(equation)\n  const [showEquationEditor, setShowEquationEditor] = useState<boolean>(false)\n  const inputRef = useRef(null)\n\n  const onHide = useCallback(\n    (restoreSelection?: boolean) => {\n      setShowEquationEditor(false)\n      editor.update(() => {\n        const node = $getNodeByKey(nodeKey)\n        if ($isEquationNode(node)) {\n          node.setEquation(equationValue)\n          if (restoreSelection) {\n            node.selectNext(0, 0)\n          }\n        }\n      })\n    },\n    [editor, equationValue, nodeKey]\n  )\n\n  useEffect(() => {\n    if (!showEquationEditor && equationValue !== equation) {\n      setEquationValue(equation)\n    }\n  }, [showEquationEditor, equation, equationValue])\n\n  useEffect(() => {\n    if (!isEditable) {\n      return\n    }\n    if (showEquationEditor) {\n      return mergeRegister(\n        editor.registerCommand(\n          SELECTION_CHANGE_COMMAND,\n          (payload) => {\n            const activeElement = document.activeElement\n            const inputElem = inputRef.current\n            if (inputElem !== activeElement) {\n              onHide()\n            }\n            return false\n          },\n          COMMAND_PRIORITY_HIGH\n        ),\n        editor.registerCommand(\n          KEY_ESCAPE_COMMAND,\n          (payload) => {\n            const activeElement = document.activeElement\n            const inputElem = inputRef.current\n            if (inputElem === activeElement) {\n              onHide(true)\n              return true\n            }\n            return false\n          },\n          COMMAND_PRIORITY_HIGH\n        )\n      )\n    } else {\n      return editor.registerUpdateListener(({ editorState }) => {\n        const isSelected = editorState.read(() => {\n          const selection = $getSelection()\n          return (\n            $isNodeSelection(selection) &&\n            selection.has(nodeKey) &&\n            selection.getNodes().length === 1\n          )\n        })\n        if (isSelected) {\n          setShowEquationEditor(true)\n        }\n      })\n    }\n  }, [editor, nodeKey, onHide, showEquationEditor, isEditable])\n\n  return (\n    <>\n      {showEquationEditor && isEditable ? (\n        <EquationEditor\n          equation={equationValue}\n          setEquation={setEquationValue}\n          inline={inline}\n          ref={inputRef}\n        />\n      ) : (\n        <ErrorBoundary onError={(e) => editor._onError(e)} fallback={null}>\n          <KatexRenderer\n            equation={equationValue}\n            inline={inline}\n            onDoubleClick={() => {\n              if (isEditable) {\n                setShowEquationEditor(true)\n              }\n            }}\n          />\n        </ErrorBoundary>\n      )}\n    </>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/editor-ui/equation-component.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/editor-ui/equation-editor.tsx",
      "content": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport type { JSX, Ref, RefObject } from \"react\"\nimport * as React from \"react\"\nimport { ChangeEvent, forwardRef } from \"react\"\n\ntype BaseEquationEditorProps = {\n  equation: string\n  inline: boolean\n  setEquation: (equation: string) => void\n}\n\nfunction EquationEditor(\n  { equation, setEquation, inline }: BaseEquationEditorProps,\n  forwardedRef: Ref<HTMLInputElement | HTMLTextAreaElement>\n): JSX.Element {\n  const onChange = (event: ChangeEvent) => {\n    setEquation((event.target as HTMLInputElement).value)\n  }\n\n  return inline && forwardedRef instanceof HTMLInputElement ? (\n    <span className=\"EquationEditor_inputBackground bg-background\">\n      <span className=\"EquationEditor_dollarSign text-muted-foreground text-left\">\n        $\n      </span>\n      <input\n        className=\"EquationEditor_inlineEditor text-primary m-0 resize-none border-0 bg-inherit p-0 outline-none\"\n        value={equation}\n        onChange={onChange}\n        autoFocus={true}\n        ref={forwardedRef as RefObject<HTMLInputElement>}\n      />\n      <span className=\"EquationEditor_dollarSign text-muted-foreground text-left\">\n        $\n      </span>\n    </span>\n  ) : (\n    <div className=\"EquationEditor_inputBackground bg-background\">\n      <span className=\"EquationEditor_dollarSign text-muted-foreground text-left\">\n        {\"$$\\n\"}\n      </span>\n      <textarea\n        className=\"EquationEditor_blockEditor text-primary m-0 w-full resize-none border-0 bg-inherit p-0 outline-none\"\n        value={equation}\n        onChange={onChange}\n        ref={forwardedRef as RefObject<HTMLTextAreaElement>}\n      />\n      <span className=\"EquationEditor_dollarSign text-muted-foreground text-left\">\n        {\"\\n$$\"}\n      </span>\n    </div>\n  )\n}\n\nexport default forwardRef(EquationEditor)\n",
      "type": "registry:component",
      "target": "components/editor/editor-ui/equation-editor.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/editor-ui/katex-equation-alterer.tsx",
      "content": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport * as React from \"react\"\nimport { JSX, useCallback, useState } from \"react\"\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\"\nimport { ErrorBoundary } from \"react-error-boundary\"\n\nimport KatexRenderer from \"@/registry/new-york-v4/editor/editor-ui/katex-renderer\"\nimport { Button } from \"@/registry/new-york-v4/ui/button\"\nimport { Checkbox } from \"@/registry/new-york-v4/ui/checkbox\"\nimport { Input } from \"@/registry/new-york-v4/ui/input\"\nimport { Label } from \"@/registry/new-york-v4/ui/label\"\nimport { Textarea } from \"@/registry/new-york-v4/ui/textarea\"\n\ntype Props = {\n  initialEquation?: string\n  onConfirm: (equation: string, inline: boolean) => void\n}\n\nexport default function KatexEquationAlterer({\n  onConfirm,\n  initialEquation = \"\",\n}: Props): JSX.Element {\n  const [editor] = useLexicalComposerContext()\n  const [equation, setEquation] = useState<string>(initialEquation)\n  const [inline, setInline] = useState<boolean>(true)\n\n  const onClick = useCallback(() => {\n    onConfirm(equation, inline)\n  }, [onConfirm, equation, inline])\n\n  const onCheckboxChange = useCallback(() => {\n    setInline(!inline)\n  }, [setInline, inline])\n\n  return (\n    <>\n      <div className=\"flex items-center space-x-2\">\n        <Label htmlFor=\"inline-toggle\" className=\"text-sm font-medium\">\n          Inline\n        </Label>\n        <Checkbox\n          id=\"inline-toggle\"\n          checked={inline}\n          onCheckedChange={onCheckboxChange}\n        />\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"equation-input\" className=\"text-sm font-medium\">\n          Equation\n        </Label>\n        {inline ? (\n          <Input\n            id=\"equation-input\"\n            onChange={(event) => setEquation(event.target.value)}\n            value={equation}\n            placeholder=\"Enter inline equation...\"\n          />\n        ) : (\n          <Textarea\n            id=\"equation-input\"\n            onChange={(event) => setEquation(event.target.value)}\n            value={equation}\n            placeholder=\"Enter block equation...\"\n            className=\"min-h-[100px]\"\n          />\n        )}\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label className=\"text-sm font-medium\">Visualization</Label>\n        <div className=\"bg-muted rounded-md border p-4\">\n          <ErrorBoundary onError={(e) => editor._onError(e)} fallback={null}>\n            <KatexRenderer\n              equation={equation}\n              inline={false}\n              onDoubleClick={() => null}\n            />\n          </ErrorBoundary>\n        </div>\n      </div>\n\n      <div className=\"flex justify-end\">\n        <Button onClick={onClick}>Confirm</Button>\n      </div>\n    </>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/editor-ui/katex-equation-alterer.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/editor-ui/katex-renderer.tsx",
      "content": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport * as React from \"react\"\nimport { JSX, useEffect, useRef } from \"react\"\nimport katex from \"katex\"\n\nexport default function KatexRenderer({\n  equation,\n  inline,\n  onDoubleClick,\n}: Readonly<{\n  equation: string\n  inline: boolean\n  onDoubleClick: () => void\n}>): JSX.Element {\n  const katexElementRef = useRef(null)\n\n  useEffect(() => {\n    const katexElement = katexElementRef.current\n\n    if (katexElement !== null) {\n      katex.render(equation, katexElement, {\n        displayMode: !inline, // true === block display //\n        errorColor: \"#cc0000\",\n        output: \"html\",\n        strict: \"warn\",\n        throwOnError: false,\n        trust: false,\n      })\n    }\n  }, [equation, inline])\n\n  return (\n    // We use an empty image tag either side to ensure Android doesn't try and compose from the\n    // inner text from Katex. There didn't seem to be any other way of making this work,\n    // without having a physical space.\n    <>\n      <img src=\"#\" alt=\"\" />\n      <span\n        role=\"button\"\n        tabIndex={-1}\n        onDoubleClick={onDoubleClick}\n        ref={katexElementRef}\n      />\n      <img src=\"#\" alt=\"\" />\n    </>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/editor-ui/katex-renderer.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/transformers/markdown-equation-transformer.ts",
      "content": "import { TextMatchTransformer } from \"@lexical/markdown\"\n\nimport {\n  $createEquationNode,\n  $isEquationNode,\n  EquationNode,\n} from \"@/registry/new-york-v4/editor/nodes/equation-node\"\n\nexport const EQUATION: TextMatchTransformer = {\n  dependencies: [EquationNode],\n  export: (node) => {\n    if (!$isEquationNode(node)) {\n      return null\n    }\n\n    return `$${node.getEquation()}$`\n  },\n  importRegExp: /\\$([^$]+?)\\$/,\n  regExp: /\\$([^$]+?)\\$$/,\n  replace: (textNode, match) => {\n    const [, equation] = match\n    const equationNode = $createEquationNode(equation, true)\n    textNode.replace(equationNode)\n  },\n  trigger: \"$\",\n  type: \"text-match\",\n}\n",
      "type": "registry:component",
      "target": "components/editor/transformers/markdown-equation-transformer.ts"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/toolbar/block-insert/insert-equation.tsx",
      "content": "\"use client\"\n\nimport { DiffIcon } from \"lucide-react\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\nimport { InsertEquationDialog } from \"@/registry/new-york-v4/editor/plugins/equations-plugin\"\nimport { SelectItem } from \"@/registry/new-york-v4/ui/select\"\n\nexport function InsertEquation() {\n  const { activeEditor, showModal } = useToolbarContext()\n\n  return (\n    <SelectItem\n      value=\"equation\"\n      onPointerUp={() =>\n        showModal(\"Insert Equation\", (onClose) => (\n          <InsertEquationDialog activeEditor={activeEditor} onClose={onClose} />\n        ))\n      }\n      className=\"\"\n    >\n      <div className=\"flex items-center gap-1\">\n        <DiffIcon className=\"size-4\" />\n        <span>Equation</span>\n      </div>\n    </SelectItem>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/block-insert/insert-equation.tsx"
    }
  ]
}