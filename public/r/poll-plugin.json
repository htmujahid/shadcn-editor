{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "poll-plugin",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "files": [
    {
      "path": "editor/plugins/poll-plugin.tsx",
      "content": "'use client'\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nimport { useEffect, useState, JSX } from 'react'\r\nimport * as React from 'react'\r\n\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport { $wrapNodeInElement } from '@lexical/utils'\r\nimport {\r\n  $createParagraphNode,\r\n  $insertNodes,\r\n  $isRootOrShadowRoot,\r\n  COMMAND_PRIORITY_EDITOR,\r\n  LexicalCommand,\r\n  LexicalEditor,\r\n  createCommand,\r\n} from 'lexical'\r\n\r\nimport { Button } from '@/registry/default/ui/button'\r\nimport { DialogFooter } from '@/registry/default/ui/dialog'\r\nimport { Input } from '@/registry/default/ui/input'\r\nimport { Label } from '@/registry/default/ui/label'\r\n\r\nimport { $createPollNode, PollNode, createPollOption } from '@/registry/default/editor/nodes/poll-node'\r\n\r\nexport const INSERT_POLL_COMMAND: LexicalCommand<string> = createCommand(\r\n  'INSERT_POLL_COMMAND'\r\n)\r\n\r\nexport function InsertPollDialog({\r\n  activeEditor,\r\n  onClose,\r\n}: {\r\n  activeEditor: LexicalEditor\r\n  onClose: () => void\r\n}): JSX.Element {\r\n  const [question, setQuestion] = useState('')\r\n\r\n  const onClick = () => {\r\n    activeEditor.dispatchCommand(INSERT_POLL_COMMAND, question)\r\n    onClose()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <Label>Question</Label>\r\n        <Input onChange={(e) => setQuestion(e.target.value)} value={question} />\r\n      </div>\r\n      <DialogFooter>\r\n        <Button disabled={question.trim() === ''} onClick={onClick}>\r\n          Confirm\r\n        </Button>\r\n      </DialogFooter>\r\n    </>\r\n  )\r\n}\r\n\r\nexport function PollPlugin(): JSX.Element | null {\r\n  const [editor] = useLexicalComposerContext()\r\n  useEffect(() => {\r\n    if (!editor.hasNodes([PollNode])) {\r\n      throw new Error('PollPlugin: PollNode not registered on editor')\r\n    }\r\n\r\n    return editor.registerCommand<string>(\r\n      INSERT_POLL_COMMAND,\r\n      (payload) => {\r\n        const pollNode = $createPollNode(payload, [\r\n          createPollOption(),\r\n          createPollOption(),\r\n        ])\r\n        $insertNodes([pollNode])\r\n        if ($isRootOrShadowRoot(pollNode.getParentOrThrow())) {\r\n          $wrapNodeInElement(pollNode, $createParagraphNode).selectEnd()\r\n        }\r\n\r\n        return true\r\n      },\r\n      COMMAND_PRIORITY_EDITOR\r\n    )\r\n  }, [editor])\r\n  return null\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/poll-plugin.tsx"
    }
  ]
}