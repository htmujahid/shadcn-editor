{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "font-format-toolbar-plugin",
  "type": "registry:ui",
  "dependencies": [
    "@lexical/table"
  ],
  "registryDependencies": [
    "toggle",
    "https://shadcn-editor.vercel.app/r/toolbar-plugin.json"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/editor/plugins/toolbar/font-format-toolbar-plugin.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { $isTableSelection } from \"@lexical/table\"\nimport {\n  $isRangeSelection,\n  BaseSelection,\n  FORMAT_TEXT_COMMAND,\n  TextFormatType,\n} from \"lexical\"\nimport {\n  BoldIcon,\n  CodeIcon,\n  ItalicIcon,\n  StrikethroughIcon,\n  UnderlineIcon,\n} from \"lucide-react\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\nimport { useUpdateToolbarHandler } from \"@/registry/new-york-v4/editor/editor-hooks/use-update-toolbar\"\nimport { Toggle } from \"@/registry/new-york-v4/ui/toggle\"\n\nconst Icons: Partial<Record<TextFormatType, React.ElementType>> = {\n  bold: BoldIcon,\n  italic: ItalicIcon,\n  underline: UnderlineIcon,\n  strikethrough: StrikethroughIcon,\n  code: CodeIcon,\n} as const\n\nexport function FontFormatToolbarPlugin({\n  format,\n}: {\n  format: Omit<TextFormatType, \"highlight\" | \"subscript\" | \"superscript\">\n}) {\n  const { activeEditor } = useToolbarContext()\n  const [isSelected, setIsSelected] = useState<boolean>(false)\n\n  const $updateToolbar = (selection: BaseSelection) => {\n    if ($isRangeSelection(selection) || $isTableSelection(selection)) {\n      // @ts-ignore\n      setIsSelected(selection.hasFormat(format as TextFormatType))\n    }\n  }\n\n  useUpdateToolbarHandler($updateToolbar)\n\n  const Icon = Icons[format as TextFormatType] as React.ElementType\n\n  return (\n    <Toggle\n      aria-label=\"Toggle bold\"\n      variant=\"outline\"\n      size=\"sm\"\n      defaultPressed={isSelected}\n      pressed={isSelected}\n      onPressedChange={setIsSelected}\n      onClick={() => {\n        activeEditor.dispatchCommand(\n          FORMAT_TEXT_COMMAND,\n          format as TextFormatType\n        )\n      }}\n    >\n      <Icon className=\"h-4 w-4\" />\n    </Toggle>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/font-format-toolbar-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/editor-hooks/use-update-toolbar.ts",
      "content": "import { useEffect } from \"react\"\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\"\nimport {\n  $getSelection,\n  BaseSelection,\n  COMMAND_PRIORITY_CRITICAL,\n  SELECTION_CHANGE_COMMAND,\n} from \"lexical\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\n\nexport function useUpdateToolbarHandler(\n  callback: (selection: BaseSelection) => void\n) {\n  const [editor] = useLexicalComposerContext()\n  const { activeEditor } = useToolbarContext()\n\n  useEffect(() => {\n    return activeEditor.registerCommand(\n      SELECTION_CHANGE_COMMAND,\n      () => {\n        const selection = $getSelection()\n        if (selection) {\n          callback(selection)\n        }\n        return false\n      },\n      COMMAND_PRIORITY_CRITICAL\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editor, callback])\n\n  useEffect(() => {\n    activeEditor.getEditorState().read(() => {\n      const selection = $getSelection()\n      if (selection) {\n        callback(selection)\n      }\n    })\n  }, [activeEditor, callback])\n}\n",
      "type": "registry:hook",
      "target": "components/editor/editor-hooks/use-update-toolbar.ts"
    }
  ]
}